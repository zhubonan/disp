{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DISP's documentation DIstributed Structure Prediction (DISP) is a package for running crystal structure prediction workloads in a distributed and asynchronous manner over a range of computing resources. At the moment, it is mainly for managing and running ab initio random structure searching ( AIRSS ). The main advantage of using this package of over the transitional way of submitting many arrays jobs for individual seeds is that each search can span over multiple computing clusters, and the jobs resources are allocated dynamically at run time , rather than fixed at submission time. For example, it is possible to queue up many searching workloads or divert all computing power to a specific problem on-demand. flowchart TD A[PC] --> |search tasks| B[Server]; B --> |relaxed geometries| A; subgraph HPC1 W1; W2; end subgraph HPC W3; W4; end B --- W1[Worker1]; B --- W2[Worker2]; B --- W3[Worker3]; B --- W4[Worker4]; Behind the scene, this packages uses fireworks as the backend for job scheduling. This also means that the structure prediction workload can be run together with other jobs such as those managed by AiiDA and automate . The search results are centrally stored in a MongoDB server, which allows statistics from multiple originals to be combined easily for analysis. The main way of interacting with DISP is through a command line interface (CLI). The packaged is aimed to be fully compatible with the toolkit provided by the original open sourced (GPLv2) AIRSS toolkit. The plane-wave DFT code CASTEP is recommended for running the search due to its robustness electronic solver and reliable local optimisation routines. Typically, the search is done with calculations optimised for speed rather than accuracy (convergence), and addition calculations (refinement) will need to be run on a small set of low energy structures. DISP also supports directly launching these workloads using CASTEP and VASP (through automate ).","title":"Home"},{"location":"#welcome-to-disps-documentation","text":"DIstributed Structure Prediction (DISP) is a package for running crystal structure prediction workloads in a distributed and asynchronous manner over a range of computing resources. At the moment, it is mainly for managing and running ab initio random structure searching ( AIRSS ). The main advantage of using this package of over the transitional way of submitting many arrays jobs for individual seeds is that each search can span over multiple computing clusters, and the jobs resources are allocated dynamically at run time , rather than fixed at submission time. For example, it is possible to queue up many searching workloads or divert all computing power to a specific problem on-demand. flowchart TD A[PC] --> |search tasks| B[Server]; B --> |relaxed geometries| A; subgraph HPC1 W1; W2; end subgraph HPC W3; W4; end B --- W1[Worker1]; B --- W2[Worker2]; B --- W3[Worker3]; B --- W4[Worker4]; Behind the scene, this packages uses fireworks as the backend for job scheduling. This also means that the structure prediction workload can be run together with other jobs such as those managed by AiiDA and automate . The search results are centrally stored in a MongoDB server, which allows statistics from multiple originals to be combined easily for analysis. The main way of interacting with DISP is through a command line interface (CLI). The packaged is aimed to be fully compatible with the toolkit provided by the original open sourced (GPLv2) AIRSS toolkit. The plane-wave DFT code CASTEP is recommended for running the search due to its robustness electronic solver and reliable local optimisation routines. Typically, the search is done with calculations optimised for speed rather than accuracy (convergence), and addition calculations (refinement) will need to be run on a small set of low energy structures. DISP also supports directly launching these workloads using CASTEP and VASP (through automate ).","title":"Welcome to DISP's documentation"},{"location":"FAQ/","text":"Where can I found information about how to use AIRSS? Official source distribution . It contains an example direction with tutorials. Running the tutorials does not need to have a DFT code installed, and can be done on a computer. Official online documentation . It contains the content of most examples comes with the source distribution as well as some additional tutorials. Unofficial documentation (PDF) . However, the official source distribution is recommanded instead of the modified version in that repository. The source code itself. If you are not sure about a specific setting, look it up in the source code, where useful code comments can be often be found nearby. Do I have to use CASTEP for DFT relaxation? This package ( disp ) only supports CASTEP. The latter can be obtained free-of-charge for academic use by signing up the academic license: https://licenses.stfc.ac.uk/product/castep. In theory, any DFT code (and interatomic potential codes) can be use to relax the structures. The stock airss.pl driver script actually support quite a few. CASTEP is well tested for running AIRSS search, and its robust electronic and geometry minimisation implementations can benefit calculations with geometries that are far from local minima (e.g. generated random structures).","title":"FAQ"},{"location":"FAQ/#where-can-i-found-information-about-how-to-use-airss","text":"Official source distribution . It contains an example direction with tutorials. Running the tutorials does not need to have a DFT code installed, and can be done on a computer. Official online documentation . It contains the content of most examples comes with the source distribution as well as some additional tutorials. Unofficial documentation (PDF) . However, the official source distribution is recommanded instead of the modified version in that repository. The source code itself. If you are not sure about a specific setting, look it up in the source code, where useful code comments can be often be found nearby.","title":"Where can I found information about how to use AIRSS?"},{"location":"FAQ/#do-i-have-to-use-castep-for-dft-relaxation","text":"This package ( disp ) only supports CASTEP. The latter can be obtained free-of-charge for academic use by signing up the academic license: https://licenses.stfc.ac.uk/product/castep. In theory, any DFT code (and interatomic potential codes) can be use to relax the structures. The stock airss.pl driver script actually support quite a few. CASTEP is well tested for running AIRSS search, and its robust electronic and geometry minimisation implementations can benefit calculations with geometries that are far from local minima (e.g. generated random structures).","title":"Do I have to use CASTEP for DFT relaxation?"},{"location":"AIRSS%20Guide/castep_relax/","text":"The castep_relax script This is script supplied by the airss package. The main idea is to restart the DFT calculations every certain number of geometry step, in order to update the basis set when running in the fixed basis set mode with variable unit cell. By default, the script does several restarts with very small number of ionic steps, as it is expected that the volume could change significantly in the very begining. Afterwards, the geom_max_iter setting in the param is respected. The optimisation is terminated if CASTEP reports that the optimization is successful in two consecutive restats, of if the maximum number of steps has been reached. The input syntex is: castep_relax <maxit> <exe> <sim> <symm> <seed> These arguments are explained as below: <maxit> is the maximum total number of geometry optimisation steps among all restarts. The optimisation is assumed to be finished if this number of steps has been reached. <exe> is the launch command for running CASTEP, including the MPI launch command and its arguments. <sim> is a switch to enable check if the same structure has been found before. It should be disabled by setting it to 0 in DISP, as each calculation is run under a different directory. If the <symm> switch is set to 1 the structure will be symmetrised on-the-fly during the restarts. It is typically turned off. <seed> is the name of the seed for CASTEP. When to use it DISP invoke this script during the search and relaxation tasks to perform the geomettry optimisation. Typically, the user does not need to use this script manually, although it can useful when testing the parameters or for performing manual relaxations of reference structures. In the standard AIRSS search, this script is invoked by airss.pl internally for CASTEP relaxation.","title":"castep_relax"},{"location":"AIRSS%20Guide/castep_relax/#the-castep_relax-script","text":"This is script supplied by the airss package. The main idea is to restart the DFT calculations every certain number of geometry step, in order to update the basis set when running in the fixed basis set mode with variable unit cell. By default, the script does several restarts with very small number of ionic steps, as it is expected that the volume could change significantly in the very begining. Afterwards, the geom_max_iter setting in the param is respected. The optimisation is terminated if CASTEP reports that the optimization is successful in two consecutive restats, of if the maximum number of steps has been reached. The input syntex is: castep_relax <maxit> <exe> <sim> <symm> <seed> These arguments are explained as below: <maxit> is the maximum total number of geometry optimisation steps among all restarts. The optimisation is assumed to be finished if this number of steps has been reached. <exe> is the launch command for running CASTEP, including the MPI launch command and its arguments. <sim> is a switch to enable check if the same structure has been found before. It should be disabled by setting it to 0 in DISP, as each calculation is run under a different directory. If the <symm> switch is set to 1 the structure will be symmetrised on-the-fly during the restarts. It is typically turned off. <seed> is the name of the seed for CASTEP.","title":"The castep_relax script"},{"location":"AIRSS%20Guide/castep_relax/#when-to-use-it","text":"DISP invoke this script during the search and relaxation tasks to perform the geomettry optimisation. Typically, the user does not need to use this script manually, although it can useful when testing the parameters or for performing manual relaxations of reference structures. In the standard AIRSS search, this script is invoked by airss.pl internally for CASTEP relaxation.","title":"When to use it"},{"location":"AIRSS%20Guide/inputs/","text":"Typical inputs The buildcell program is the workhorse for generating random structures. It is often useful to generate a initial cell using the gencell utility with gencell <volume> <units> [<specie> <number>] . For example to search for SrTiO3 , one can input: gencell 60 4 Sr 1 Ti 1 O 3 This prepares a seed to search for four formula units of SrTiO3 , each formula unit is expected to have a volume of 60 \\(\\mathrm{\u00c5^3}\\) . The cell file The content of the generated file 4SrTiO3.cell is shown below: Example %BLOCK LATTICE_CART 3.914865 0 0 0 3.914865 0 0 0 3.914865 %ENDBLOCK LATTICE_CART #VARVOL=60 %BLOCK POSITIONS_FRAC Sr 0.0 0.0 0.0 # Sr1 % NUM=1 Sr 0.0 0.0 0.0 # Sr2 % NUM=1 Sr 0.0 0.0 0.0 # Sr3 % NUM=1 Sr 0.0 0.0 0.0 # Sr4 % NUM=1 Ti 0.0 0.0 0.0 # Ti1 % NUM=1 Ti 0.0 0.0 0.0 # Ti2 % NUM=1 Ti 0.0 0.0 0.0 # Ti3 % NUM=1 Ti 0.0 0.0 0.0 # Ti4 % NUM=1 O 0.0 0.0 0.0 # O1 % NUM=1 O 0.0 0.0 0.0 # O2 % NUM=1 O 0.0 0.0 0.0 # O3 % NUM=1 O 0.0 0.0 0.0 # O4 % NUM=1 O 0.0 0.0 0.0 # O5 % NUM=1 O 0.0 0.0 0.0 # O6 % NUM=1 O 0.0 0.0 0.0 # O7 % NUM=1 O 0.0 0.0 0.0 # O8 % NUM=1 O 0.0 0.0 0.0 # O9 % NUM=1 O 0.0 0.0 0.0 # O10 % NUM=1 O 0.0 0.0 0.0 # O11 % NUM=1 O 0.0 0.0 0.0 # O12 % NUM=1 %ENDBLOCK POSITIONS_FRAC ##SPECIES=Sr,Ti,O ##NATOM=3-9 ##FOCUS=3 #SYMMOPS=2-4 ##SGRANK=20 #NFORM=1 ##ADJGEN=0-1 #SLACK=0.25 #OVERLAP=0.1 #MINSEP=1-3 AUTO #COMPACT #CELLADAPT ##SYSTEM={Rhom,Tric,Mono,Cubi,Hexa,Orth,Tetra} KPOINTS_MP_SPACING 0.07 SYMMETRY_GENERATE SNAP_TO_SYMMETRY %BLOCK SPECIES_POT QC5 %ENDBLOCK SPECIES_POT %BLOCK EXTERNAL_PRESSURE 0 0 0 0 0 0 %ENDBLOCK EXTERNAL_PRESSURE As you can see, the input file for buildcell is essentially an marked up cell file for CASTEP. Lines starting with # provides directives for buildcell , although those with ## will still be ignored. Options for buildcell Several key tags are explained below: VARVOL Defines the variable volume of the unit cell, the exact volume will be randomise at a harded coded range of \u00b1 5%. The actual unit cell vectors will be randomised, and those in the LATTICE_CART block takes no effect. POSITIONS_ABC Defines the initial positions of the atoms in the unit cell. The syntax after the # is <set name> % [<tags>...] . Where <set name> can be used to define rigid fragments by setting the same value for all of the linked sites. Since each atom should be considered independently in this example, each line has a different value. After the % comes the site-specific settings. The NUM allows a single site to be multiplicated. For example, adding 12 oxygen atoms can achieved specified by O 0. 0. 0. # O % NUM=12 instead of doing it line by line. SYMOPS Defines the number of symmetry operations to be included in the randomised structure. The - defines the range and a random value will be drawn from. SGRANK This tags can be enabled to bias the (randomly chosen) space group towards those that are more frequently found in the ICSD. The value defines a threshold rank for accepting the space group. NFORM This tags defines the number of formula units to be included in the generated structure. Here, the cell has the formula \\(\\ce{Sr4Ti4O12}\\) according to the POSITIONS_ABC block. If one changes NFORM to be 2 , then the effective chemical formula would be \\(\\ce{Sr8Ti8O24}\\) . If NCORM is not defined, the composition will be affect by SYMOPS , placing all atoms in the general positions. ADJGEN This tags is used to modify the number of general positions when generating symmetry-containing structures. By default, the number of general positions is maximised. This tags allows more special postions to be occupied if possible. For blind search, there is no need to use this tag in most cases. MINSEP This tags defines the specie-wise minimum separations and is one of the few tags that need to be manually changed by hand. The default 1-3 AUTO means to randomly set minimum separations per specie-pair between 1 \u00c5 and 3 \u00c5, but also try to extract and use that of the best structure if possible. The latter part is achieved by looking for a .minsep file in the current wroking directory, which is generated by the airss.pl script on-the-fly. This approach cannot be used by DIPS searches each calculation will be run from different directories (and probably also different machines). Initial values may be composed by the knowledge of common bond lengths. The cryan -g command can also be used to extract MINSEP from existing structures. SLACK,OVERLAP These two tags controls the process of modifying the structure to satisfy the minimum separations. Roughly speaking, a geometry optimisation is performed ,each species-pair having a hard shell potential. The tag SLACK defines how soft the hard shell potential constructed will be, and OVERLAP defines the threshold for acceptance. There is usually no need to vary these two tags. COMPACT,CELLADAPT Controls if the cell should be compacted and deformed based on the hard shell potentials. There is usually no need to change these two tags. SYSTEM Allows limiting the generated structure to certain crystal systems, which can be useful to bias the search based on prior knowledge. Options for CASTEP Lines not marked up by # are often passed through, below are descriptions of some CASTEP-related tags that goes in the cell file. Note The buildcell program will not always pass through the native CASTEP keys, so check the output cell carefully. KPOINTS_MP_SPACING Defines kpoints spacing in unit of \\(\\mathrm{2\\pi\\,\u00c5^{-1}}\\) . Usually a not so well-converged setting can be used for the initial search. SYMMETRY_GENERATE Let CASTEP determine the symmetry for acclerating calculations. You will almost always want to have this. SNAP_TO_SYMMETRY Snap the atoms to the positions according to the determined symmetry. You will almost always want to have this. EXTERNAL_PRESSURE The upper triangle of the external stress tenser. It does not get passed through after buildcell . HUBBARD_U The Hubbard-U values for each specie and orbital. For example, Mn d:3 will apply an effective U of 3 eV to the d orbital of Mn. The param file The param file read by CASTEP only, and not used for building structure. A default param file for CASTEP from gencell looks like this: Example task : geometryoptimization xc_functional : PBE spin_polarized : false fix_occupancy : false metals_method : dm mixing_scheme : pulay max_scf_cycles : 1000 cut_off_energy : 340 eV opt_strategy : speed page_wvfns : 0 num_dump_cycles : 0 backup_interval : 0 geom_method : LBFGS geom_max_iter : 20 mix_history_length : 20 finite_basis_corr : 0 fixed_npw : true write_cell_structure : true write_checkpoint : none write_bib : false write_otfg : false write_cst_esp : false write_bands : false write_geom : false bs_write_eigenvalues : false calculate_stress : true Several tags that you may want to modify are: xc_functional Defines the exchange-correlation functional to be used. Since PBE often bias towards less bonded (larger volume) phases, one may want to use PBEsol instead. spin_polarized If set to true the calculation will be spin polarized. Note that CASTEP does not have default set for each site, so one have to break the symmetry manually in addition to setting this tag. fixed_npw aka, fix the number of plane waves. CASTEP default to constant basis-quality during variable-cell geometry geometry optmisation rather than the constant basis set in many other plane wave codes. While this allows getting a reliable final energy with restarts, the castep_relax script already handles automatically restart anyway. Having consistant basis-quality may not be optimum when large pulay stress is present, e.g. using less well-converged cut off energies. Hence, it is preferable to set it to true and use the constant basis set approach. cut_off_energy The cut off energy should be sufficient for the pseudopotential used. There is no need to high quality but harder pseudopotentials in the initial search in most case. geom_method Algorithm for geometry optmisation. LBFGS works well cases, otherwise tpsd may be used instead. mixing_scheme This tags controls the charge density mixer. The pulay mixer is OK for most case, otherwise one can use broyden instead if convergence struggles. max_scf_cycles Keep a large value to avoid CASTEP giving up the structure due to electronic convergence instability. opt_strategy Use speed to keep everything in the RAM and avoid any slow disk IO. geom_max_iter Number of geometry optimisation per run. Since castep_relax will repetively restart calculation, use a small value so the basis set is reset every so often. For fixed cell optimisation, one can use a large value in combination with apporiate castep_relax arguments and avoid restarts. metals_method Use dm (density mixing) for speed.","title":"Inputs"},{"location":"AIRSS%20Guide/inputs/#typical-inputs","text":"The buildcell program is the workhorse for generating random structures. It is often useful to generate a initial cell using the gencell utility with gencell <volume> <units> [<specie> <number>] . For example to search for SrTiO3 , one can input: gencell 60 4 Sr 1 Ti 1 O 3 This prepares a seed to search for four formula units of SrTiO3 , each formula unit is expected to have a volume of 60 \\(\\mathrm{\u00c5^3}\\) .","title":"Typical inputs"},{"location":"AIRSS%20Guide/inputs/#the-cell-file","text":"The content of the generated file 4SrTiO3.cell is shown below: Example %BLOCK LATTICE_CART 3.914865 0 0 0 3.914865 0 0 0 3.914865 %ENDBLOCK LATTICE_CART #VARVOL=60 %BLOCK POSITIONS_FRAC Sr 0.0 0.0 0.0 # Sr1 % NUM=1 Sr 0.0 0.0 0.0 # Sr2 % NUM=1 Sr 0.0 0.0 0.0 # Sr3 % NUM=1 Sr 0.0 0.0 0.0 # Sr4 % NUM=1 Ti 0.0 0.0 0.0 # Ti1 % NUM=1 Ti 0.0 0.0 0.0 # Ti2 % NUM=1 Ti 0.0 0.0 0.0 # Ti3 % NUM=1 Ti 0.0 0.0 0.0 # Ti4 % NUM=1 O 0.0 0.0 0.0 # O1 % NUM=1 O 0.0 0.0 0.0 # O2 % NUM=1 O 0.0 0.0 0.0 # O3 % NUM=1 O 0.0 0.0 0.0 # O4 % NUM=1 O 0.0 0.0 0.0 # O5 % NUM=1 O 0.0 0.0 0.0 # O6 % NUM=1 O 0.0 0.0 0.0 # O7 % NUM=1 O 0.0 0.0 0.0 # O8 % NUM=1 O 0.0 0.0 0.0 # O9 % NUM=1 O 0.0 0.0 0.0 # O10 % NUM=1 O 0.0 0.0 0.0 # O11 % NUM=1 O 0.0 0.0 0.0 # O12 % NUM=1 %ENDBLOCK POSITIONS_FRAC ##SPECIES=Sr,Ti,O ##NATOM=3-9 ##FOCUS=3 #SYMMOPS=2-4 ##SGRANK=20 #NFORM=1 ##ADJGEN=0-1 #SLACK=0.25 #OVERLAP=0.1 #MINSEP=1-3 AUTO #COMPACT #CELLADAPT ##SYSTEM={Rhom,Tric,Mono,Cubi,Hexa,Orth,Tetra} KPOINTS_MP_SPACING 0.07 SYMMETRY_GENERATE SNAP_TO_SYMMETRY %BLOCK SPECIES_POT QC5 %ENDBLOCK SPECIES_POT %BLOCK EXTERNAL_PRESSURE 0 0 0 0 0 0 %ENDBLOCK EXTERNAL_PRESSURE As you can see, the input file for buildcell is essentially an marked up cell file for CASTEP. Lines starting with # provides directives for buildcell , although those with ## will still be ignored.","title":"The cell file"},{"location":"AIRSS%20Guide/inputs/#options-for-buildcell","text":"Several key tags are explained below: VARVOL Defines the variable volume of the unit cell, the exact volume will be randomise at a harded coded range of \u00b1 5%. The actual unit cell vectors will be randomised, and those in the LATTICE_CART block takes no effect. POSITIONS_ABC Defines the initial positions of the atoms in the unit cell. The syntax after the # is <set name> % [<tags>...] . Where <set name> can be used to define rigid fragments by setting the same value for all of the linked sites. Since each atom should be considered independently in this example, each line has a different value. After the % comes the site-specific settings. The NUM allows a single site to be multiplicated. For example, adding 12 oxygen atoms can achieved specified by O 0. 0. 0. # O % NUM=12 instead of doing it line by line. SYMOPS Defines the number of symmetry operations to be included in the randomised structure. The - defines the range and a random value will be drawn from. SGRANK This tags can be enabled to bias the (randomly chosen) space group towards those that are more frequently found in the ICSD. The value defines a threshold rank for accepting the space group. NFORM This tags defines the number of formula units to be included in the generated structure. Here, the cell has the formula \\(\\ce{Sr4Ti4O12}\\) according to the POSITIONS_ABC block. If one changes NFORM to be 2 , then the effective chemical formula would be \\(\\ce{Sr8Ti8O24}\\) . If NCORM is not defined, the composition will be affect by SYMOPS , placing all atoms in the general positions. ADJGEN This tags is used to modify the number of general positions when generating symmetry-containing structures. By default, the number of general positions is maximised. This tags allows more special postions to be occupied if possible. For blind search, there is no need to use this tag in most cases. MINSEP This tags defines the specie-wise minimum separations and is one of the few tags that need to be manually changed by hand. The default 1-3 AUTO means to randomly set minimum separations per specie-pair between 1 \u00c5 and 3 \u00c5, but also try to extract and use that of the best structure if possible. The latter part is achieved by looking for a .minsep file in the current wroking directory, which is generated by the airss.pl script on-the-fly. This approach cannot be used by DIPS searches each calculation will be run from different directories (and probably also different machines). Initial values may be composed by the knowledge of common bond lengths. The cryan -g command can also be used to extract MINSEP from existing structures. SLACK,OVERLAP These two tags controls the process of modifying the structure to satisfy the minimum separations. Roughly speaking, a geometry optimisation is performed ,each species-pair having a hard shell potential. The tag SLACK defines how soft the hard shell potential constructed will be, and OVERLAP defines the threshold for acceptance. There is usually no need to vary these two tags. COMPACT,CELLADAPT Controls if the cell should be compacted and deformed based on the hard shell potentials. There is usually no need to change these two tags. SYSTEM Allows limiting the generated structure to certain crystal systems, which can be useful to bias the search based on prior knowledge.","title":"Options for buildcell"},{"location":"AIRSS%20Guide/inputs/#options-for-castep","text":"Lines not marked up by # are often passed through, below are descriptions of some CASTEP-related tags that goes in the cell file. Note The buildcell program will not always pass through the native CASTEP keys, so check the output cell carefully. KPOINTS_MP_SPACING Defines kpoints spacing in unit of \\(\\mathrm{2\\pi\\,\u00c5^{-1}}\\) . Usually a not so well-converged setting can be used for the initial search. SYMMETRY_GENERATE Let CASTEP determine the symmetry for acclerating calculations. You will almost always want to have this. SNAP_TO_SYMMETRY Snap the atoms to the positions according to the determined symmetry. You will almost always want to have this. EXTERNAL_PRESSURE The upper triangle of the external stress tenser. It does not get passed through after buildcell . HUBBARD_U The Hubbard-U values for each specie and orbital. For example, Mn d:3 will apply an effective U of 3 eV to the d orbital of Mn.","title":"Options for CASTEP"},{"location":"AIRSS%20Guide/inputs/#the-param-file","text":"The param file read by CASTEP only, and not used for building structure. A default param file for CASTEP from gencell looks like this: Example task : geometryoptimization xc_functional : PBE spin_polarized : false fix_occupancy : false metals_method : dm mixing_scheme : pulay max_scf_cycles : 1000 cut_off_energy : 340 eV opt_strategy : speed page_wvfns : 0 num_dump_cycles : 0 backup_interval : 0 geom_method : LBFGS geom_max_iter : 20 mix_history_length : 20 finite_basis_corr : 0 fixed_npw : true write_cell_structure : true write_checkpoint : none write_bib : false write_otfg : false write_cst_esp : false write_bands : false write_geom : false bs_write_eigenvalues : false calculate_stress : true Several tags that you may want to modify are: xc_functional Defines the exchange-correlation functional to be used. Since PBE often bias towards less bonded (larger volume) phases, one may want to use PBEsol instead. spin_polarized If set to true the calculation will be spin polarized. Note that CASTEP does not have default set for each site, so one have to break the symmetry manually in addition to setting this tag. fixed_npw aka, fix the number of plane waves. CASTEP default to constant basis-quality during variable-cell geometry geometry optmisation rather than the constant basis set in many other plane wave codes. While this allows getting a reliable final energy with restarts, the castep_relax script already handles automatically restart anyway. Having consistant basis-quality may not be optimum when large pulay stress is present, e.g. using less well-converged cut off energies. Hence, it is preferable to set it to true and use the constant basis set approach. cut_off_energy The cut off energy should be sufficient for the pseudopotential used. There is no need to high quality but harder pseudopotentials in the initial search in most case. geom_method Algorithm for geometry optmisation. LBFGS works well cases, otherwise tpsd may be used instead. mixing_scheme This tags controls the charge density mixer. The pulay mixer is OK for most case, otherwise one can use broyden instead if convergence struggles. max_scf_cycles Keep a large value to avoid CASTEP giving up the structure due to electronic convergence instability. opt_strategy Use speed to keep everything in the RAM and avoid any slow disk IO. geom_max_iter Number of geometry optimisation per run. Since castep_relax will repetively restart calculation, use a small value so the basis set is reset every so often. For fixed cell optimisation, one can use a large value in combination with apporiate castep_relax arguments and avoid restarts. metals_method Use dm (density mixing) for speed.","title":"The param file"},{"location":"AIRSS%20Guide/introduction/","text":"Introduction In this section, we give an brief introduction of the airss package and various search related settings. Most of the contents are not specific to DISP and also apply when search with airss package along. Ingredients of a search This section gives a brief introduction of how to run a search using airss along. The searching process is rather simple: a random structure is generated and subsequently relaxed. However, both steps needs to be optimised for efficient searching. Structure generation In particular, the random structure should be not generated purely \\\"randomly\\\", but instead should based on a set of pre-determined constraints, to ensure that the output structures are physically sound. If not done so, the search can be rather inefficient 1 2 3 (often incorrectly interpreted as baseline). The structure generation process is done by the buildcell program, which takes a CASTEP cell file style input. The key quantities pass for providing the constraints are: Estimated volume Species-wise minimum separations Number of symmetry operations to include The question is: how can one know this prior to even performing the search? One simple way is to perform a short search with some guessed values. Such search may not find the true ground state, but the low energy structure would be able to provide the cues of what a ground state structure may look like. The first two parameters can thereby be estimated from the low energy structure of such \\\"pilot\\\" search. Alternatively, if there are known experimental structure, the first two parameters can be estimated from those as well. Tip cat <xxx>.res | cryan -g is your friend for exacting these parameters. If the input structure is not in the SHELX format, the cabal tool can be used to convert it into that! If one looks at typically polymorphs of a compounds, they do not vary too much (say \\< 20%) in terms of density and bond lengths. The species-wise minimum separation may be inferred from that of chemically similar materials. The exact values of the first two parameters would not make a huge difference in terms of search efficiency as long as they are sensible. In fact, one may want to use minimum separation drawn randomly from a certain Finally, one may want to include symmetry operations in the generated structures - experimental structures are rarely P1 after all. Typically, two to four symmetry operations are included in the generated structure. The actual structure may gain more symmetry during the geometry operatimisation process, so the it is no necessary to have chosen specific space group in the first place. Note A side issue of imposing symmetry operations is that once a space group is chosen, the multiplicity of a atom will not change during subsequent relaxations. For example, atoms at the general positions will not be able to move to special positions. The default rule in airss is to maximise the occupation of general positions, which reduces the overall degrees of freedom. This also seems to follow the trend in most known crystals, but there can be exceptions. More special positions can be occupied by specifying the #ADJGEN setting. Mind that the general positions of a low symmetry space group can still become special positions of a higher symmetry one or that of a smaller unit cell. The template cell file generate by gencell contains other default settings which will not be detailed here. DFT relaxation Each generated structure needs to be relaxed to a local minimium by some means. First-principles based methods are preferable as they provide realistic potential energy surfaces that are relatively smooth. Typically, this is done by CASTEP 4 , although other plane wave DFT code may also be used as well. CASTEP is preferred because it is well tested for this kind of tasks. It has robust electronic and ionic minimisation routines and soft pseudopotentials (QC5) optimised for throughput. The self-adaptive parallelisation in CASTEP also make it easy to deploy calculations on computing resources, since no manual input of parallelisation scheme is needed. The typical setting is to use the QC5 pseudopotentials that requires very low cut off energies (300 - 340 eV) in order to maximise the speed. These potentials are probably not accurate enough for regular calculations, but they are sufficient for sampling the potential energy surfaces. The depth and the relative positions the local minima may be slightly wrong, but using them would be allow us to local these low energy structure much faster. Since there is no ranking taking place during the search to direct the sampling region (e.g. unlike GA or PSO), it is not necessary to obtain accurate energy and structures at this stage. In the end, a set of high quality calculations (typically using the C19 pseudopotential set) needs be applied to refine the results and obtain reliable energy orderings. This process is applied to only a subset of low energy structures that are already near the local minimum needs to be processed. When to (not) stop In crystal structure prediction, there is no way to make sure the ground state structure found is indeed true ground state, unless one performs a exhaustive sampling of the potential energy surface, which is impractical for any high-dimensional space. However, for a single search, ones still have to have a stopping criteria. Pickard, C. J.; Needs, R. J. Ab Initio Random Structure Searching. Journal of physics. Condensed matter\u202f: an Institute of Physics journal 2011, 23 (5), 053201--053201. https://doi.org/10.1088/0953-8984/23/5/053201 . \u21a9 Section 4.2.2, https://doi.org/10.17863/CAM.55681 \u21a9 Figure 7, https://doi.org/10.1016/j.cpc.2020.107810 \u21a9 Academic license for CASTEP can be obtained free of charge, see http://www.castep.org . \u21a9","title":"Introduction"},{"location":"AIRSS%20Guide/introduction/#introduction","text":"In this section, we give an brief introduction of the airss package and various search related settings. Most of the contents are not specific to DISP and also apply when search with airss package along.","title":"Introduction"},{"location":"AIRSS%20Guide/introduction/#ingredients-of-a-search","text":"This section gives a brief introduction of how to run a search using airss along. The searching process is rather simple: a random structure is generated and subsequently relaxed. However, both steps needs to be optimised for efficient searching.","title":"Ingredients of a search"},{"location":"AIRSS%20Guide/introduction/#structure-generation","text":"In particular, the random structure should be not generated purely \\\"randomly\\\", but instead should based on a set of pre-determined constraints, to ensure that the output structures are physically sound. If not done so, the search can be rather inefficient 1 2 3 (often incorrectly interpreted as baseline). The structure generation process is done by the buildcell program, which takes a CASTEP cell file style input. The key quantities pass for providing the constraints are: Estimated volume Species-wise minimum separations Number of symmetry operations to include The question is: how can one know this prior to even performing the search? One simple way is to perform a short search with some guessed values. Such search may not find the true ground state, but the low energy structure would be able to provide the cues of what a ground state structure may look like. The first two parameters can thereby be estimated from the low energy structure of such \\\"pilot\\\" search. Alternatively, if there are known experimental structure, the first two parameters can be estimated from those as well. Tip cat <xxx>.res | cryan -g is your friend for exacting these parameters. If the input structure is not in the SHELX format, the cabal tool can be used to convert it into that! If one looks at typically polymorphs of a compounds, they do not vary too much (say \\< 20%) in terms of density and bond lengths. The species-wise minimum separation may be inferred from that of chemically similar materials. The exact values of the first two parameters would not make a huge difference in terms of search efficiency as long as they are sensible. In fact, one may want to use minimum separation drawn randomly from a certain Finally, one may want to include symmetry operations in the generated structures - experimental structures are rarely P1 after all. Typically, two to four symmetry operations are included in the generated structure. The actual structure may gain more symmetry during the geometry operatimisation process, so the it is no necessary to have chosen specific space group in the first place. Note A side issue of imposing symmetry operations is that once a space group is chosen, the multiplicity of a atom will not change during subsequent relaxations. For example, atoms at the general positions will not be able to move to special positions. The default rule in airss is to maximise the occupation of general positions, which reduces the overall degrees of freedom. This also seems to follow the trend in most known crystals, but there can be exceptions. More special positions can be occupied by specifying the #ADJGEN setting. Mind that the general positions of a low symmetry space group can still become special positions of a higher symmetry one or that of a smaller unit cell. The template cell file generate by gencell contains other default settings which will not be detailed here.","title":"Structure generation"},{"location":"AIRSS%20Guide/introduction/#dft-relaxation","text":"Each generated structure needs to be relaxed to a local minimium by some means. First-principles based methods are preferable as they provide realistic potential energy surfaces that are relatively smooth. Typically, this is done by CASTEP 4 , although other plane wave DFT code may also be used as well. CASTEP is preferred because it is well tested for this kind of tasks. It has robust electronic and ionic minimisation routines and soft pseudopotentials (QC5) optimised for throughput. The self-adaptive parallelisation in CASTEP also make it easy to deploy calculations on computing resources, since no manual input of parallelisation scheme is needed. The typical setting is to use the QC5 pseudopotentials that requires very low cut off energies (300 - 340 eV) in order to maximise the speed. These potentials are probably not accurate enough for regular calculations, but they are sufficient for sampling the potential energy surfaces. The depth and the relative positions the local minima may be slightly wrong, but using them would be allow us to local these low energy structure much faster. Since there is no ranking taking place during the search to direct the sampling region (e.g. unlike GA or PSO), it is not necessary to obtain accurate energy and structures at this stage. In the end, a set of high quality calculations (typically using the C19 pseudopotential set) needs be applied to refine the results and obtain reliable energy orderings. This process is applied to only a subset of low energy structures that are already near the local minimum needs to be processed.","title":"DFT relaxation"},{"location":"AIRSS%20Guide/introduction/#when-to-not-stop","text":"In crystal structure prediction, there is no way to make sure the ground state structure found is indeed true ground state, unless one performs a exhaustive sampling of the potential energy surface, which is impractical for any high-dimensional space. However, for a single search, ones still have to have a stopping criteria. Pickard, C. J.; Needs, R. J. Ab Initio Random Structure Searching. Journal of physics. Condensed matter\u202f: an Institute of Physics journal 2011, 23 (5), 053201--053201. https://doi.org/10.1088/0953-8984/23/5/053201 . \u21a9 Section 4.2.2, https://doi.org/10.17863/CAM.55681 \u21a9 Figure 7, https://doi.org/10.1016/j.cpc.2020.107810 \u21a9 Academic license for CASTEP can be obtained free of charge, see http://www.castep.org . \u21a9","title":"When to (not) stop"},{"location":"Getting%20Started/installation/","text":"Installation A working setup of fireworks is needed for using this package. This typically includes setting up a MongoDB server that is both accessible by the local computer and the remote clusters (compute nodes). The python fireworks package needs to be installed on both the local and the remote computers as well. The MongoDB for managing the workflows is also used as a centralised repository for holding the structure found by the search. Please refer to the documentation of fireworks for how to setup it up. As the MongoDB server also serves as a central storage for generated and relaxed structures, sufficient storage space should be available to use. Although usually the structure files (SHELX) format take relatively small spaces. The open sourced AIRSS package also needs to be compiled and installed on both the remote and local computers. This is necessary so that random structure can be built, and its scripts shipped for running CASTEP calculations and converting the results are needed as well. Once the above is done, the DISP package can be installed using pip install git+https://https://github.com/zhubonan/disp Note A newer version of pip ( >21 ) might be needed - upgrade with: pip install -U pip This will install the package with its dependencies. After this the command disp will be available to use. Database configuration A MongoDB instanec is need for distributing work and storing relaxed structures. For demostration and testing, a local MongoDB instance can be launched. Docker is recommanded for running such temporary test database. Run mongodb using docker sudo docker run -d -p 27017:27017 --name MONGO_CONTAINER mongo:4.4.9 The standard way to access MongoDB is to use the mongo shell. But using a GUI tool can also be very helpful, such as Robo3T . Launch mongo shell through docker sudo docker exec -it MONGO_CONTAINER mongo For DISP to work, it needs to know how to connect to your database. The configurations are stored in two files, my_launchpad.yaml and disp_db.yaml . The former is used by the fireworks workflow engine, and the latter is used by DISP itself for accessing the data. In theory, you can have them poiting to difference servers, but it is not yet supported - make sure they have identical host , and name and database should be the same as well. The first one should look like: host: localhost port: 27017 name: disp-db-testing username: null password: null ssl_ca_file: null logdir: null strm_lvl: INFO user_indices: [] wf_user_indices: [] authsource: admin and the second one: host: localhost port: 27017 database: disp-db-testing collection: disp_entry user: null password: null Note that for production database hosted on a remote server, you should enable authentication and put down your own username and password. Note If these two files exists at the current working directory, they will be used by default. For convenience, it is better to use environmental variable to select these files. The DISP_DB_FILE should be set and point to the location of the disp_db.yaml file. The location of the my_launchpad.yaml should is set in a file called FW_config.yaml , which is a configuration files used for Fireworks. On the remote compute, it is recommand to have a certain folder structure like below: <BASE_PATH> |- config | - FW_config.yaml | - disp_db.yaml |- airss-datastore |- <PROJECT_NAME> |.... The location of FW_config.yaml is determined from $FW_CONFIG_FILE , and the location of the <BASE_PATH> is implied from its value (or $USER/disp-base/ if not set). Typically, the disp_db.yaml is in the same folder as FW_config.yaml . When you launch a search through DISP, a project_name is passed, and it is used as a relative path insdie airss-datastore for storing detailed DFT output. For example, search data from project C2/100GPa/run1 will be placed into <BASE_PATH>/airss-datastore/C2/100GPa/run1 Note It is worth setting both FW_CONFIG_FILE and DISP_DB_FILE in your .bashrc . Test configuration A quick way to print out your configuration is to use: disp check database Obtaining and compiling AIRSS The AIRSS code can be downloaded from: https://www.mtg.msm.cam.ac.uk/Codes/AIRSS. Note For the 0.9.1 version the external/spglib/makefile needs to be updated. Download the updated version here . Afterwards, make && make install will compile and install the executables to bin inside the code folder. You will need to add the bin folder to your PATH variable. Finally, check that AIRSS is working with make check . AIRSS should be installed on any computer that runs structure search workload. Note You may want to use a newer version of AIRSS if possible.","title":"Installation"},{"location":"Getting%20Started/installation/#installation","text":"A working setup of fireworks is needed for using this package. This typically includes setting up a MongoDB server that is both accessible by the local computer and the remote clusters (compute nodes). The python fireworks package needs to be installed on both the local and the remote computers as well. The MongoDB for managing the workflows is also used as a centralised repository for holding the structure found by the search. Please refer to the documentation of fireworks for how to setup it up. As the MongoDB server also serves as a central storage for generated and relaxed structures, sufficient storage space should be available to use. Although usually the structure files (SHELX) format take relatively small spaces. The open sourced AIRSS package also needs to be compiled and installed on both the remote and local computers. This is necessary so that random structure can be built, and its scripts shipped for running CASTEP calculations and converting the results are needed as well. Once the above is done, the DISP package can be installed using pip install git+https://https://github.com/zhubonan/disp Note A newer version of pip ( >21 ) might be needed - upgrade with: pip install -U pip This will install the package with its dependencies. After this the command disp will be available to use.","title":"Installation"},{"location":"Getting%20Started/installation/#database-configuration","text":"A MongoDB instanec is need for distributing work and storing relaxed structures. For demostration and testing, a local MongoDB instance can be launched. Docker is recommanded for running such temporary test database. Run mongodb using docker sudo docker run -d -p 27017:27017 --name MONGO_CONTAINER mongo:4.4.9 The standard way to access MongoDB is to use the mongo shell. But using a GUI tool can also be very helpful, such as Robo3T . Launch mongo shell through docker sudo docker exec -it MONGO_CONTAINER mongo For DISP to work, it needs to know how to connect to your database. The configurations are stored in two files, my_launchpad.yaml and disp_db.yaml . The former is used by the fireworks workflow engine, and the latter is used by DISP itself for accessing the data. In theory, you can have them poiting to difference servers, but it is not yet supported - make sure they have identical host , and name and database should be the same as well. The first one should look like: host: localhost port: 27017 name: disp-db-testing username: null password: null ssl_ca_file: null logdir: null strm_lvl: INFO user_indices: [] wf_user_indices: [] authsource: admin and the second one: host: localhost port: 27017 database: disp-db-testing collection: disp_entry user: null password: null Note that for production database hosted on a remote server, you should enable authentication and put down your own username and password. Note If these two files exists at the current working directory, they will be used by default. For convenience, it is better to use environmental variable to select these files. The DISP_DB_FILE should be set and point to the location of the disp_db.yaml file. The location of the my_launchpad.yaml should is set in a file called FW_config.yaml , which is a configuration files used for Fireworks. On the remote compute, it is recommand to have a certain folder structure like below: <BASE_PATH> |- config | - FW_config.yaml | - disp_db.yaml |- airss-datastore |- <PROJECT_NAME> |.... The location of FW_config.yaml is determined from $FW_CONFIG_FILE , and the location of the <BASE_PATH> is implied from its value (or $USER/disp-base/ if not set). Typically, the disp_db.yaml is in the same folder as FW_config.yaml . When you launch a search through DISP, a project_name is passed, and it is used as a relative path insdie airss-datastore for storing detailed DFT output. For example, search data from project C2/100GPa/run1 will be placed into <BASE_PATH>/airss-datastore/C2/100GPa/run1 Note It is worth setting both FW_CONFIG_FILE and DISP_DB_FILE in your .bashrc .","title":"Database configuration"},{"location":"Getting%20Started/installation/#test-configuration","text":"A quick way to print out your configuration is to use: disp check database","title":"Test configuration"},{"location":"Getting%20Started/installation/#obtaining-and-compiling-airss","text":"The AIRSS code can be downloaded from: https://www.mtg.msm.cam.ac.uk/Codes/AIRSS. Note For the 0.9.1 version the external/spglib/makefile needs to be updated. Download the updated version here . Afterwards, make && make install will compile and install the executables to bin inside the code folder. You will need to add the bin folder to your PATH variable. Finally, check that AIRSS is working with make check . AIRSS should be installed on any computer that runs structure search workload. Note You may want to use a newer version of AIRSS if possible.","title":"Obtaining and compiling AIRSS"},{"location":"Getting%20Started/remote_computer/","text":"Setup on the remote computer DISP and associated packages needs to be installed on the computers which the workload will be run. In most cases, the process is similar to that of installation on the local computer. It is recommanded that you install all packages in a conda environment , rather than relying on system-wide installed python environment. Installation using conda environment manager For computing clusters and supercomputers, the default HOME folder of user may not be mounted on the computer nodes. If that if the case, you can install miniconda3 onto the work/scratch partition and use a activation script to enable the environment. Example activation script: . /work/xxx/<username>/miniconda3/etc/profile.d/conda.sh export WORK_DIR=\"/work/xxxx/<username>\" export FW_CONFIG_FILE=\"/work/xxx/<username>/disp/config/FW_config.yaml\" export DISP_DB_FILE=\"/work/xxx/<username>/disp/config/disp_db.yaml\" export PATH=${WORK_DIR}/airss-0.9.1/bin:$PATH assuming that AIRSS has been compiled and installed under $WORK_DIR/airss-0.9.1 . This file is save as /work/xxx/<username>/activate_disp.sh . To create a conda environment and install DISP in it: conda create -p /work/xxx/<username>/disp-base/disp_env python=3.8 conda activate /work/xxx/<username>/disp-base/disp_env pip install git+https://https://github.com/zhubonan/disp Once done, you should use disp check database to test if the connection to the remote server is working. Submission script To have DISP running on the compute nodes, the jobs script setup the environment and start the work using the trlaunch command (or arlaunch from aiida-fireworks-scheduler ). Here is an example jobs script for SLURM scheduler: #!/bin/bash # Slurm job options (job-name, compute nodes, job time) #SBATCH --job-name=DISP-32 #SBATCH --time=24:00:00 #SBATCH --nodes=1 #SBATCH --tasks-per-node=128 #SBATCH --cpus-per-task=1 # User account information #SBATCH --account=XXXX #SBATCH --partition=XXXX #SBATCH --qos=XXXX # Setup the job environment (this module needs to be loaded before any other modules) # Modules should be loaded for running CASTEP module load <PACKAGE NAME> module list # Initiate conda environments source /work/xxxx/<username>/activate_disp.sh # Activate the conda environment with DISP installed conda activate /work/xxxx/<username>/disp-base/disp_env # Default launch command prefix for CASTEP export MPI_LAUNCH_CMD=\"srun -N1 -n32 --exclusive --mem-per-cpu=1600M --cpus-per-task=1 --distribution=block:block --hint=nomultithread\" # Check connect to the remote server lpad get_fws -m 1 if [ \"$?\" -eq 0 ]; then # Start the rocket launcher CMD=\"trlaunch -l ${WORK_DIR}/disp-base/config/my_launchpad.yaml -w ./fworker-32-core.yaml multi 4 --timeout 86000 --local_redirect --nlaunches 100\" eval $CMD else echo \"Server cannot be reached - job terminated\" fi In this example, each compute node has 128 CPUs and we want to run four 32-core CASTEP jobs concurrent for relaxing the structure. This is achieve by the line below: CMD=\"trlaunch -l ${WORK_DIR}/disp-base/config/my_launchpad.yaml -w ./fworker-32-core.yaml multi 4 --timeout 86000 --local_redirect\" which runs 4 concurrent workers, each using 32 CPUs. The workers will run indefinitely until the timeout has passed, or when there is no jobs in the server to be picked up. In this example, each cluster job is limited to 24 hours, and a timeout 86000 seconds is set to avoid picking new job in the very last part of the allocation. Any unfinished relaxation will be loaded to the server and pick up by other workers in the future. The file fworker-32-core.yaml controls certain run time parameters and gives an identity to the process runs our structure searching workload. name: \"<CLUSTER NAME> 32-core worker\" category: - 32-core query: '{}' env: castep_codes: latest: srun -N1 -n32 --mem-per-cpu=1600M --cpus-per-task=1 --exclusive --cpu-bind=cores --distribution=block:block --hint=nomultithread /work/xxx/<username>/castep/bin/latest/castep.mpi 2011: srun -N1 -n32 --mem-per-cpu=1600M --cpus-per-task=1 --exclusive --cpu-bind=cores --distribution=block:block --hint=nomultithread /work/xxx/<username>/castep/bin/linux_x86_64_gfortran10.0-XT--2011-geom-spin/castep.mpi # Use non-login shell for running The env section contains directive specific for this worker. The castep_codes contains a dictionary of code alias and the full command to be used for launching CASTEP. It the requesteed code is not found in this section, the default castep.mpi (from $PATH ) will be used with prefix from MPI_LAUNCH_CMD used. The category allows controling the placement of workload. Each search can be associated with one or more categories, and only those worker with matching category will pull the job to run. For example, those with small unit cells can be run with few number of MPI processes (to improve the overall throughput). In this example, advanced job step capability of the SLURM scheduler is used to run many smaller jobs inside a single job, using the srun MPI launcher. Care should be taken to verify the CPU resources are indeed allocated in the correct way. Further reading","title":"Setup for remote computers"},{"location":"Getting%20Started/remote_computer/#setup-on-the-remote-computer","text":"DISP and associated packages needs to be installed on the computers which the workload will be run. In most cases, the process is similar to that of installation on the local computer. It is recommanded that you install all packages in a conda environment , rather than relying on system-wide installed python environment.","title":"Setup on the remote computer"},{"location":"Getting%20Started/remote_computer/#installation-using-conda-environment-manager","text":"For computing clusters and supercomputers, the default HOME folder of user may not be mounted on the computer nodes. If that if the case, you can install miniconda3 onto the work/scratch partition and use a activation script to enable the environment. Example activation script: . /work/xxx/<username>/miniconda3/etc/profile.d/conda.sh export WORK_DIR=\"/work/xxxx/<username>\" export FW_CONFIG_FILE=\"/work/xxx/<username>/disp/config/FW_config.yaml\" export DISP_DB_FILE=\"/work/xxx/<username>/disp/config/disp_db.yaml\" export PATH=${WORK_DIR}/airss-0.9.1/bin:$PATH assuming that AIRSS has been compiled and installed under $WORK_DIR/airss-0.9.1 . This file is save as /work/xxx/<username>/activate_disp.sh . To create a conda environment and install DISP in it: conda create -p /work/xxx/<username>/disp-base/disp_env python=3.8 conda activate /work/xxx/<username>/disp-base/disp_env pip install git+https://https://github.com/zhubonan/disp Once done, you should use disp check database to test if the connection to the remote server is working.","title":"Installation using conda environment manager"},{"location":"Getting%20Started/remote_computer/#submission-script","text":"To have DISP running on the compute nodes, the jobs script setup the environment and start the work using the trlaunch command (or arlaunch from aiida-fireworks-scheduler ). Here is an example jobs script for SLURM scheduler: #!/bin/bash # Slurm job options (job-name, compute nodes, job time) #SBATCH --job-name=DISP-32 #SBATCH --time=24:00:00 #SBATCH --nodes=1 #SBATCH --tasks-per-node=128 #SBATCH --cpus-per-task=1 # User account information #SBATCH --account=XXXX #SBATCH --partition=XXXX #SBATCH --qos=XXXX # Setup the job environment (this module needs to be loaded before any other modules) # Modules should be loaded for running CASTEP module load <PACKAGE NAME> module list # Initiate conda environments source /work/xxxx/<username>/activate_disp.sh # Activate the conda environment with DISP installed conda activate /work/xxxx/<username>/disp-base/disp_env # Default launch command prefix for CASTEP export MPI_LAUNCH_CMD=\"srun -N1 -n32 --exclusive --mem-per-cpu=1600M --cpus-per-task=1 --distribution=block:block --hint=nomultithread\" # Check connect to the remote server lpad get_fws -m 1 if [ \"$?\" -eq 0 ]; then # Start the rocket launcher CMD=\"trlaunch -l ${WORK_DIR}/disp-base/config/my_launchpad.yaml -w ./fworker-32-core.yaml multi 4 --timeout 86000 --local_redirect --nlaunches 100\" eval $CMD else echo \"Server cannot be reached - job terminated\" fi In this example, each compute node has 128 CPUs and we want to run four 32-core CASTEP jobs concurrent for relaxing the structure. This is achieve by the line below: CMD=\"trlaunch -l ${WORK_DIR}/disp-base/config/my_launchpad.yaml -w ./fworker-32-core.yaml multi 4 --timeout 86000 --local_redirect\" which runs 4 concurrent workers, each using 32 CPUs. The workers will run indefinitely until the timeout has passed, or when there is no jobs in the server to be picked up. In this example, each cluster job is limited to 24 hours, and a timeout 86000 seconds is set to avoid picking new job in the very last part of the allocation. Any unfinished relaxation will be loaded to the server and pick up by other workers in the future. The file fworker-32-core.yaml controls certain run time parameters and gives an identity to the process runs our structure searching workload. name: \"<CLUSTER NAME> 32-core worker\" category: - 32-core query: '{}' env: castep_codes: latest: srun -N1 -n32 --mem-per-cpu=1600M --cpus-per-task=1 --exclusive --cpu-bind=cores --distribution=block:block --hint=nomultithread /work/xxx/<username>/castep/bin/latest/castep.mpi 2011: srun -N1 -n32 --mem-per-cpu=1600M --cpus-per-task=1 --exclusive --cpu-bind=cores --distribution=block:block --hint=nomultithread /work/xxx/<username>/castep/bin/linux_x86_64_gfortran10.0-XT--2011-geom-spin/castep.mpi # Use non-login shell for running The env section contains directive specific for this worker. The castep_codes contains a dictionary of code alias and the full command to be used for launching CASTEP. It the requesteed code is not found in this section, the default castep.mpi (from $PATH ) will be used with prefix from MPI_LAUNCH_CMD used. The category allows controling the placement of workload. Each search can be associated with one or more categories, and only those worker with matching category will pull the job to run. For example, those with small unit cells can be run with few number of MPI processes (to improve the overall throughput). In this example, advanced job step capability of the SLURM scheduler is used to run many smaller jobs inside a single job, using the srun MPI launcher. Care should be taken to verify the CPU resources are indeed allocated in the correct way.","title":"Submission script"},{"location":"Getting%20Started/remote_computer/#further-reading","text":"","title":"Further reading"},{"location":"How-To/analyse_data/","text":"Analyse data Python interface Interface to AiiDA","title":"Analyse Data"},{"location":"How-To/analyse_data/#analyse-data","text":"","title":"Analyse data"},{"location":"How-To/analyse_data/#python-interface","text":"","title":"Python interface"},{"location":"How-To/analyse_data/#interface-to-aiida","text":"","title":"Interface to AiiDA"},{"location":"How-To/manage_search/","text":"Manage the search Monitor throughput The easiest way to see how the search is going is to use the disp db throughput command. It will show a bar chart of the number of new structure per hour, and it is possible to controll what the counts are grouped with disp db throughput -g worker_name Check progress Use disp db summary --project <project_name> to check how many structure has been relaxed for the particular project(s). The <project_name> field is an regular expression to be used for matching. It is also possible to use --seed to further select certain seed names. In addition, to the number of structure generated, it will also show how many workflows for each seed has been completed or ready to run. Example $ disp db summary --project LFP Structure WF count - search RES Init ARCHIVED DEFUSED FIZZLED ALL project seed catdisc/LFP/with-u-rerun 2LFP 663 816 792.0 1.0 7.0 800.0 4LFP 972 1200 1200.0 0.0 0.0 1200.0 catdisc/LFP/without-u-rerun 2LFP 762 800 800.0 0.0 0.0 800.0 4LFP 1157 1200 1200.0 0.0 0.0 1200.0 Or per project statistics. $ disp db summary --project LFP --per-project Structure WF count - search RES Init ARCHIVED DEFUSED FIZZLED ALL project catdisc/LFP/with-u-rerun 2383 2995 2936.0 1001.0 63.0 4000.0 catdisc/LFP/without-u-rerun 2838 3117 2977.0 1000.0 23.0 4000.0 Prioritize certain tasks Priority of the tasks ( Firework ) can be modified with lpad interface. The following command can be used to change the priority of project catdisc/LFP . lpad updates_fws -q '{\"spec.project_name\": \"catdisc/LFP\", \"state\":\"READY\"} -u '{\"_priority\": 100}' Note Unfinished relaxations (e.g. restarts) will have increase priority over new structures. Cancel searches A search can be cancelled/paused by defuse/pause relavant tasks. This may be achieved with the lpad interface. lpad defuse_fws -q '{\"spec.project_name\": \"catdisc/LFP\", \"state\":\"READY\"} and lpad pause_fws -q '{\"spec.project_name\": \"catdisc/LFP\", \"state\":\"READY\"} for pausing jobs. Note Due to the limitation of fireworks, pausing/defusing a large number of jobs can take a long time and no progress is reported. A modified version of fireworks can be used to include process report ( here ). Failure handling/lost runs CASTEP relaxations are usually fairly robust and you should not see consistent DFT errors. Due to the nature of the random structure, it is not rare that certain relaxation would errors. Since it is random sampling, having randomly failed calculation should not affect the results. However, in some cases, especially systems with spin-polarisation and requires Hubbard U correction, CASTEP may struggle to converge the electronic structure for ill-form input structures. You will see that the number of relaxed structure being much fewer than that of the initial structures, despite relaxation workflow being in the \"COMPLETED\" states, which is for the purpose of workflow management only. To access the actual relaxation output, one has to dig into the stored_data of the associated launch , then check the launch directory of those in the ERRORED state. Lost runs Due to the server-client architecture of the workflow system. The client may lose content with the server, causing the jobs checked out to be staled. This is, unfortunately, irrecoverable, and the only solution is to rerun the lost task. This can be done with: lpad detect_lostruns --rerun since the necessary information to start a new CASTEP calculation is already stored on the server.","title":"Manage Searches"},{"location":"How-To/manage_search/#manage-the-search","text":"","title":"Manage the search"},{"location":"How-To/manage_search/#monitor-throughput","text":"The easiest way to see how the search is going is to use the disp db throughput command. It will show a bar chart of the number of new structure per hour, and it is possible to controll what the counts are grouped with disp db throughput -g worker_name","title":"Monitor throughput"},{"location":"How-To/manage_search/#check-progress","text":"Use disp db summary --project <project_name> to check how many structure has been relaxed for the particular project(s). The <project_name> field is an regular expression to be used for matching. It is also possible to use --seed to further select certain seed names. In addition, to the number of structure generated, it will also show how many workflows for each seed has been completed or ready to run. Example $ disp db summary --project LFP Structure WF count - search RES Init ARCHIVED DEFUSED FIZZLED ALL project seed catdisc/LFP/with-u-rerun 2LFP 663 816 792.0 1.0 7.0 800.0 4LFP 972 1200 1200.0 0.0 0.0 1200.0 catdisc/LFP/without-u-rerun 2LFP 762 800 800.0 0.0 0.0 800.0 4LFP 1157 1200 1200.0 0.0 0.0 1200.0 Or per project statistics. $ disp db summary --project LFP --per-project Structure WF count - search RES Init ARCHIVED DEFUSED FIZZLED ALL project catdisc/LFP/with-u-rerun 2383 2995 2936.0 1001.0 63.0 4000.0 catdisc/LFP/without-u-rerun 2838 3117 2977.0 1000.0 23.0 4000.0","title":"Check progress"},{"location":"How-To/manage_search/#prioritize-certain-tasks","text":"Priority of the tasks ( Firework ) can be modified with lpad interface. The following command can be used to change the priority of project catdisc/LFP . lpad updates_fws -q '{\"spec.project_name\": \"catdisc/LFP\", \"state\":\"READY\"} -u '{\"_priority\": 100}' Note Unfinished relaxations (e.g. restarts) will have increase priority over new structures.","title":"Prioritize certain tasks"},{"location":"How-To/manage_search/#cancel-searches","text":"A search can be cancelled/paused by defuse/pause relavant tasks. This may be achieved with the lpad interface. lpad defuse_fws -q '{\"spec.project_name\": \"catdisc/LFP\", \"state\":\"READY\"} and lpad pause_fws -q '{\"spec.project_name\": \"catdisc/LFP\", \"state\":\"READY\"} for pausing jobs. Note Due to the limitation of fireworks, pausing/defusing a large number of jobs can take a long time and no progress is reported. A modified version of fireworks can be used to include process report ( here ).","title":"Cancel searches"},{"location":"How-To/manage_search/#failure-handlinglost-runs","text":"CASTEP relaxations are usually fairly robust and you should not see consistent DFT errors. Due to the nature of the random structure, it is not rare that certain relaxation would errors. Since it is random sampling, having randomly failed calculation should not affect the results. However, in some cases, especially systems with spin-polarisation and requires Hubbard U correction, CASTEP may struggle to converge the electronic structure for ill-form input structures. You will see that the number of relaxed structure being much fewer than that of the initial structures, despite relaxation workflow being in the \"COMPLETED\" states, which is for the purpose of workflow management only. To access the actual relaxation output, one has to dig into the stored_data of the associated launch , then check the launch directory of those in the ERRORED state.","title":"Failure handling/lost runs"},{"location":"How-To/manage_search/#lost-runs","text":"Due to the server-client architecture of the workflow system. The client may lose content with the server, causing the jobs checked out to be staled. This is, unfortunately, irrecoverable, and the only solution is to rerun the lost task. This can be done with: lpad detect_lostruns --rerun since the necessary information to start a new CASTEP calculation is already stored on the server.","title":"Lost runs"},{"location":"background/airss/","text":"Ab initio Random Structure Searching (AIRSS) Ab initio random structure searching (AIRSS) 1 2 is an approach to search for low energy structure by simply generating random structures, followed by local optimisation. Local optimisation is a relatively simple and mathematically well-established, it found a nearby local minimum in the configuration space by simply going down-hill in energy. The potential energy surface (PES) can be divided into many basins-of-attraction. Performing a local optimisation inside a basin would lead us to bottom of this basin, e.g. the local minimum. From first glance, such random sampling approach is deemed to fail for complex and high-dimensional configuration space due to the existence of many high energy local minima, making the chance of landing in the basin of attraction of the global minimum diminishing. However, one must not forget that the potential energy surface (PES) is a physical quantity, and hence their structure follow certain rules. While the number of high energy local minima may be overwhelming, the chance of landing into a basins-of-attraction is proportional to its hypervolume, and the lower the energy, the larger the hypervolume, favouring even a random sampler. In addition, we know that a large portion of the configuration space is not likely to contain any low energy minima - the atoms the bonds between them do have well-known finite sizes. The region of the PES including atoms very close to each other are unlikely to have any low energy minima, and hence can be excluded from sampling. Likewise, structures with atoms far apart from each other should also be excluded from sampling. With a few physical constraints, such as the species-wise minimum separations, including symmetry operations, a simple random search approach can be made highly efficient for locating the ground state structure and other low energy polymorphs. While the structures are randomly generated, the parameters controlling the generation process are not randomly chosen - they are motivated by physical reasons. The phrase ab initio not only means that this approach can be used with first-principles methods for energy evaluation, but also that it should be used with them, since it is the physical nature of the PES that is been exploited here. While random search can be applied with parameterized interatomic potentials, the latter are unlikely to reproduce the true PES especially in the region far away from fitted phases. Hence, it is not a surprise if random search does not work well in those cases. A consequence of random sampling is that the computational workload can be made fully parallel and distributed. There is no need to coordinate the search as a whole, each worker can work independently little or no inter-communication at all. In constrast, global optimisation methods such as basin hopping, requires each calculation to be performed in serial. Population based approaches such as genetic algorithms and particle swarm optimisation allow certain degree of parallelism within a single generation (tenth of structures), but each generation still have to be evaluated iteratively. This means that for random searching: The underlying DFT calculations can be parallelised over only a few CPUs each, maximising the parallel efficiently which otherwise can drop sharply with increasing core counts. The elimination of iterative process means there is no dilemma of exploration or exploitation . A further consequence is that the DFT calculations can be performed at relatively low basis set qulaity and accuracy to maximise the speed, usually at several times lower in the cost compared to normal calculations. In addition, most structures include and perserv symmetry operations throughout the process, which can be used to speed-up DFT calculations by several folds. The AIRSS package The AIRSS package is a open-source collection of tools and scripts for performing ab initio random structure searching (AIRSS) (which confusinly has the same name), and analysing the results. The key components of this package includes: buildcell The main work horse for generating structures. This file reads a input seed file from stdin and outputs generated structuer in stdout. Both input and outputs files are in the CASTEP\\'s cell format, and the former contains special directives on how the random Structure should be generated. airss.pl The main driver script for performing the search. It read command line arguments and performs random structure generation and runs DFT calculations in serial, and stop until the specified number of structure has been generated. Because the search is embarrsingly parallel, one can just launch as many airss.pl as they like to occupy all computational resources. For example, to sample 800 structure using 128 cores, one can launch 8 airss.pl script each using 16 cores and sampling 100 structures. The result of airss.pl are saved in the SHELX format with suffix res . These files contains both the crystal structure and the calculated quantities. While DISP does not use this script directly, it is recommanded that the user familiarise themselves with operating AIRSS using it. cryan A tool to analyse the relaxed structures. It can be used to rank structures according to energy as well as eliminating nearly identical structures and extracting species-wise minimum distances. It also has many other advanced features as such decomposing a structure into modular units. cabal A tool for convert different file formats. It is used internally by various scripts. One very useful feature is to convert file into SHELX format so they can be processed by cryan . castep_relax The driver script for performing geometry optimisation using CASTEP. The use of this script is needed because CASTEP defaults to constant-cut off energy variable cell optionsation. For high-throughput operation the more traditional constant basis optimisation is more efficeint, but t requires multiple restarts to reach convergence. This script does exactly this jobs - it restarts CASTEP relaxation up to defined iterations or until the converged is reached twice in succession. This script is used by DISP to perform CASTEP relaxations. Comparing with AIRSS package DISP extends the search ability in AIRSS to allow a client-server based workflow for directing massive parallel search at run time. The AIRSS package must be installed on both the local and the remote machines. Similar to the airss.pl script, the castep_relax script is invoked for relaxation with CASTEP in DISP. The output file is stored in the SHELX format that is compatible with the cryan tool. The input and output files used here are aimed to be fully compatible with the original AIRSS package. Pickard, C. J.; Needs, R. J. High-Pressure Phases of Silane. Phys. Rev. Lett. 2006, 97 (4), 045504. https://doi.org/10.1103/PhysRevLett.97.045504 . \u21a9 Pickard, C. J.; Needs, R. J. Ab Initio Random Structure Searching. Journal of physics. Condensed matter\u202f: an Institute of Physics journal 2011, 23 (5), 053201--053201. https://doi.org/10.1088/0953-8984/23/5/053201 . \u21a9","title":"AIRSS"},{"location":"background/airss/#ab-initio-random-structure-searching-airss","text":"Ab initio random structure searching (AIRSS) 1 2 is an approach to search for low energy structure by simply generating random structures, followed by local optimisation. Local optimisation is a relatively simple and mathematically well-established, it found a nearby local minimum in the configuration space by simply going down-hill in energy. The potential energy surface (PES) can be divided into many basins-of-attraction. Performing a local optimisation inside a basin would lead us to bottom of this basin, e.g. the local minimum. From first glance, such random sampling approach is deemed to fail for complex and high-dimensional configuration space due to the existence of many high energy local minima, making the chance of landing in the basin of attraction of the global minimum diminishing. However, one must not forget that the potential energy surface (PES) is a physical quantity, and hence their structure follow certain rules. While the number of high energy local minima may be overwhelming, the chance of landing into a basins-of-attraction is proportional to its hypervolume, and the lower the energy, the larger the hypervolume, favouring even a random sampler. In addition, we know that a large portion of the configuration space is not likely to contain any low energy minima - the atoms the bonds between them do have well-known finite sizes. The region of the PES including atoms very close to each other are unlikely to have any low energy minima, and hence can be excluded from sampling. Likewise, structures with atoms far apart from each other should also be excluded from sampling. With a few physical constraints, such as the species-wise minimum separations, including symmetry operations, a simple random search approach can be made highly efficient for locating the ground state structure and other low energy polymorphs. While the structures are randomly generated, the parameters controlling the generation process are not randomly chosen - they are motivated by physical reasons. The phrase ab initio not only means that this approach can be used with first-principles methods for energy evaluation, but also that it should be used with them, since it is the physical nature of the PES that is been exploited here. While random search can be applied with parameterized interatomic potentials, the latter are unlikely to reproduce the true PES especially in the region far away from fitted phases. Hence, it is not a surprise if random search does not work well in those cases. A consequence of random sampling is that the computational workload can be made fully parallel and distributed. There is no need to coordinate the search as a whole, each worker can work independently little or no inter-communication at all. In constrast, global optimisation methods such as basin hopping, requires each calculation to be performed in serial. Population based approaches such as genetic algorithms and particle swarm optimisation allow certain degree of parallelism within a single generation (tenth of structures), but each generation still have to be evaluated iteratively. This means that for random searching: The underlying DFT calculations can be parallelised over only a few CPUs each, maximising the parallel efficiently which otherwise can drop sharply with increasing core counts. The elimination of iterative process means there is no dilemma of exploration or exploitation . A further consequence is that the DFT calculations can be performed at relatively low basis set qulaity and accuracy to maximise the speed, usually at several times lower in the cost compared to normal calculations. In addition, most structures include and perserv symmetry operations throughout the process, which can be used to speed-up DFT calculations by several folds.","title":"Ab initio Random Structure Searching (AIRSS)"},{"location":"background/airss/#the-airss-package","text":"The AIRSS package is a open-source collection of tools and scripts for performing ab initio random structure searching (AIRSS) (which confusinly has the same name), and analysing the results. The key components of this package includes:","title":"The AIRSS package"},{"location":"background/airss/#buildcell","text":"The main work horse for generating structures. This file reads a input seed file from stdin and outputs generated structuer in stdout. Both input and outputs files are in the CASTEP\\'s cell format, and the former contains special directives on how the random Structure should be generated.","title":"buildcell"},{"location":"background/airss/#airsspl","text":"The main driver script for performing the search. It read command line arguments and performs random structure generation and runs DFT calculations in serial, and stop until the specified number of structure has been generated. Because the search is embarrsingly parallel, one can just launch as many airss.pl as they like to occupy all computational resources. For example, to sample 800 structure using 128 cores, one can launch 8 airss.pl script each using 16 cores and sampling 100 structures. The result of airss.pl are saved in the SHELX format with suffix res . These files contains both the crystal structure and the calculated quantities. While DISP does not use this script directly, it is recommanded that the user familiarise themselves with operating AIRSS using it.","title":"airss.pl"},{"location":"background/airss/#cryan","text":"A tool to analyse the relaxed structures. It can be used to rank structures according to energy as well as eliminating nearly identical structures and extracting species-wise minimum distances. It also has many other advanced features as such decomposing a structure into modular units.","title":"cryan"},{"location":"background/airss/#cabal","text":"A tool for convert different file formats. It is used internally by various scripts. One very useful feature is to convert file into SHELX format so they can be processed by cryan .","title":"cabal"},{"location":"background/airss/#castep_relax","text":"The driver script for performing geometry optimisation using CASTEP. The use of this script is needed because CASTEP defaults to constant-cut off energy variable cell optionsation. For high-throughput operation the more traditional constant basis optimisation is more efficeint, but t requires multiple restarts to reach convergence. This script does exactly this jobs - it restarts CASTEP relaxation up to defined iterations or until the converged is reached twice in succession. This script is used by DISP to perform CASTEP relaxations.","title":"castep_relax"},{"location":"background/airss/#comparing-with-airss-package","text":"DISP extends the search ability in AIRSS to allow a client-server based workflow for directing massive parallel search at run time. The AIRSS package must be installed on both the local and the remote machines. Similar to the airss.pl script, the castep_relax script is invoked for relaxation with CASTEP in DISP. The output file is stored in the SHELX format that is compatible with the cryan tool. The input and output files used here are aimed to be fully compatible with the original AIRSS package. Pickard, C. J.; Needs, R. J. High-Pressure Phases of Silane. Phys. Rev. Lett. 2006, 97 (4), 045504. https://doi.org/10.1103/PhysRevLett.97.045504 . \u21a9 Pickard, C. J.; Needs, R. J. Ab Initio Random Structure Searching. Journal of physics. Condensed matter\u202f: an Institute of Physics journal 2011, 23 (5), 053201--053201. https://doi.org/10.1088/0953-8984/23/5/053201 . \u21a9","title":"Comparing with AIRSS package"},{"location":"background/structure_searching/","text":"Crystal Structure Prediction The structure of the material is essential in order to carry out any materials modelling work. Very often, this information has to be obtained experimentally in the first place, or a reasonable guess must be performed. For example, if one want to compute the band structure of TiO2 using DFT, the crystal structure of that particular TiO2 polymorph (and there are many of them) is needed as the input. However, what if one want to model materials that has not been synthesised? Or perhaps looking for other polymorphs of the same composition that can potentailly have different properties? Crystal structure prediction is the process of predicting the crystal structure of materials from no or limited experimental data. Quantum mechanics based first-principles calculations allow accurate energy/force/stress to be determined for any given atomic structure. Using these techniques, in theory, one can just type in the formula and the computer should be able to output the experimental crystal structure(s). This, however, turned out to be not so trivial and may involve significant amount of the computational work load. The root of the problem is the vast configurational spaces to be explored - for a periodic system with N atoms there are 3N + 1 dimensions, making locating the global minimum, or points having similar energy to the global minimum challenging. Fortunately, many approaches have been developed to tackle this problem. Simulated annealing Basin hopping Minimum hopping Genetic algorithms Particle swarm optimisation Random search The phrase crystal structure prediction is sometimes used to describe those based on subsituting species in known structures from databases, usually coupled with machine learning. While they offers essentially cost-free predictions for a given composition, they are often limited to systems that are well studied and have many experimental data available. While low energy structures for particular composition can be suggested, but there is no guarantee that the true ground state structure is among them, due to the lack of true exploration. Nevertheless, when apply to a large number of compositions, they can still provide valuable information of the chemical space. Ab initio Random Structure Searching - brief introduction Ab initio random structure searching (AIRSS) 1 2 is an approach to search for low energy structure by simply generating random structures, followed by local optimisation. Local optimisation is a relatively simple and mathematically well-established, it found a nearby local minimum in the configuration space by simply going down-hill in energy. The potential energy surface (PES) can be divided into many basins-of-attraction. Performing a local optimisation inside a basin would lead us to bottom of this basin, e.g. the local minimum. From first glance, such random sampling approach is deemed to fail for complex and high-dimensional configuration space due to the existence of many high energy local minima, making the chance of landing in the basin of attraction of the global minimum diminishing. However, one must not forget that the potential energy surface (PES) is a physical quantity, and hence their structure follow certain rules. While the number of high energy local minima may be overwhelming, the chance of landing into a basins-of-attraction is proportional to its hypervolume, and the lower the energy, the larger the hypervolume, favouring even a random sampler. In addition, we know that a large portion of the configuration space is not likely to contain any low energy minima - the atoms the bonds between them do have well-known finite sizes. The region of the PES including atoms very close to each other are unlikely to have any low energy minima, and hence can be excluded from sampling. Likewise, structures with atoms far apart from each other should also be excluded from sampling. With a few physical constraints, such as the species-wise minimum separations, including symmetry operations, a simple random search approach can be made highly efficient for locating the ground state structure and other low energy polymorphs. While the structures are randomly generated, the parameters controlling the generation process are not randomly chosen - they are motivated by physical reasons. The phrase ab initio not only means that this approach can be used with first-principles methods for energy evaluation, but also that it should be used with them, since it is the physical nature of the PES that is been exploited here. While random search can be applied with parameterized interatomic potentials, the latter are unlikely to reproduce the true PES especially in the region far away from fitted phases. Hence, it is not a surprise if random search does not work well in those cases. A consequence of random sampling is that the computational workload can be made fully parallel and distributed. There is no need to coordinate the search as a whole, each worker can work independently little or no inter-communication at all. In constrast, \\\"global optimisation\\\" methods such as basin hopping, requires each calculation to be performed in serial. Population based approaches such as genetic algorithms and particle swarm optimisation allow certain degree of parallelism within a single generation (tenth of structures), but each generation still have to be evaluated iteratively. This means that for random searching: The underlying DFT calculations can be parallelised over only a few CPUs each, maximising the parallel efficiently which otherwise can drop sharply with increasing core counts. The elimination of iterative process means there is no dilemma of exploration or exploitation . A further consequence is that the DFT calculations can be performed at relatively low basis set qulaity and accuracy to maximise the speed, usually at several times lower in the cost compared to normal calculations. In addition, most structures include and perserv symmetry operations throughout the process, which can be used to speed-up DFT calculations by several folds. Pickard, C. J.; Needs, R. J. High-Pressure Phases of Silane. Phys. Rev. Lett. 2006, 97 (4), 045504. https://doi.org/10.1103/PhysRevLett.97.045504 . \u21a9 Pickard, C. J.; Needs, R. J. Ab Initio Random Structure Searching. Journal of physics. Condensed matter\u202f: an Institute of Physics journal 2011, 23 (5), 053201--053201. https://doi.org/10.1088/0953-8984/23/5/053201 . \u21a9","title":"Crystal Structure Prediction"},{"location":"background/structure_searching/#crystal-structure-prediction","text":"The structure of the material is essential in order to carry out any materials modelling work. Very often, this information has to be obtained experimentally in the first place, or a reasonable guess must be performed. For example, if one want to compute the band structure of TiO2 using DFT, the crystal structure of that particular TiO2 polymorph (and there are many of them) is needed as the input. However, what if one want to model materials that has not been synthesised? Or perhaps looking for other polymorphs of the same composition that can potentailly have different properties? Crystal structure prediction is the process of predicting the crystal structure of materials from no or limited experimental data. Quantum mechanics based first-principles calculations allow accurate energy/force/stress to be determined for any given atomic structure. Using these techniques, in theory, one can just type in the formula and the computer should be able to output the experimental crystal structure(s). This, however, turned out to be not so trivial and may involve significant amount of the computational work load. The root of the problem is the vast configurational spaces to be explored - for a periodic system with N atoms there are 3N + 1 dimensions, making locating the global minimum, or points having similar energy to the global minimum challenging. Fortunately, many approaches have been developed to tackle this problem. Simulated annealing Basin hopping Minimum hopping Genetic algorithms Particle swarm optimisation Random search The phrase crystal structure prediction is sometimes used to describe those based on subsituting species in known structures from databases, usually coupled with machine learning. While they offers essentially cost-free predictions for a given composition, they are often limited to systems that are well studied and have many experimental data available. While low energy structures for particular composition can be suggested, but there is no guarantee that the true ground state structure is among them, due to the lack of true exploration. Nevertheless, when apply to a large number of compositions, they can still provide valuable information of the chemical space.","title":"Crystal Structure Prediction"},{"location":"background/structure_searching/#ab-initio-random-structure-searching-brief-introduction","text":"Ab initio random structure searching (AIRSS) 1 2 is an approach to search for low energy structure by simply generating random structures, followed by local optimisation. Local optimisation is a relatively simple and mathematically well-established, it found a nearby local minimum in the configuration space by simply going down-hill in energy. The potential energy surface (PES) can be divided into many basins-of-attraction. Performing a local optimisation inside a basin would lead us to bottom of this basin, e.g. the local minimum. From first glance, such random sampling approach is deemed to fail for complex and high-dimensional configuration space due to the existence of many high energy local minima, making the chance of landing in the basin of attraction of the global minimum diminishing. However, one must not forget that the potential energy surface (PES) is a physical quantity, and hence their structure follow certain rules. While the number of high energy local minima may be overwhelming, the chance of landing into a basins-of-attraction is proportional to its hypervolume, and the lower the energy, the larger the hypervolume, favouring even a random sampler. In addition, we know that a large portion of the configuration space is not likely to contain any low energy minima - the atoms the bonds between them do have well-known finite sizes. The region of the PES including atoms very close to each other are unlikely to have any low energy minima, and hence can be excluded from sampling. Likewise, structures with atoms far apart from each other should also be excluded from sampling. With a few physical constraints, such as the species-wise minimum separations, including symmetry operations, a simple random search approach can be made highly efficient for locating the ground state structure and other low energy polymorphs. While the structures are randomly generated, the parameters controlling the generation process are not randomly chosen - they are motivated by physical reasons. The phrase ab initio not only means that this approach can be used with first-principles methods for energy evaluation, but also that it should be used with them, since it is the physical nature of the PES that is been exploited here. While random search can be applied with parameterized interatomic potentials, the latter are unlikely to reproduce the true PES especially in the region far away from fitted phases. Hence, it is not a surprise if random search does not work well in those cases. A consequence of random sampling is that the computational workload can be made fully parallel and distributed. There is no need to coordinate the search as a whole, each worker can work independently little or no inter-communication at all. In constrast, \\\"global optimisation\\\" methods such as basin hopping, requires each calculation to be performed in serial. Population based approaches such as genetic algorithms and particle swarm optimisation allow certain degree of parallelism within a single generation (tenth of structures), but each generation still have to be evaluated iteratively. This means that for random searching: The underlying DFT calculations can be parallelised over only a few CPUs each, maximising the parallel efficiently which otherwise can drop sharply with increasing core counts. The elimination of iterative process means there is no dilemma of exploration or exploitation . A further consequence is that the DFT calculations can be performed at relatively low basis set qulaity and accuracy to maximise the speed, usually at several times lower in the cost compared to normal calculations. In addition, most structures include and perserv symmetry operations throughout the process, which can be used to speed-up DFT calculations by several folds. Pickard, C. J.; Needs, R. J. High-Pressure Phases of Silane. Phys. Rev. Lett. 2006, 97 (4), 045504. https://doi.org/10.1103/PhysRevLett.97.045504 . \u21a9 Pickard, C. J.; Needs, R. J. Ab Initio Random Structure Searching. Journal of physics. Condensed matter\u202f: an Institute of Physics journal 2011, 23 (5), 053201--053201. https://doi.org/10.1088/0953-8984/23/5/053201 . \u21a9","title":"Ab initio Random Structure Searching - brief introduction"},{"location":"background/workflow_engine/","text":"Inner workings Fireworks Fireworks is the workflow engine that DISP uses to deploy searches. Its fully documentation can be found in its own website. For simple search and retrieve type of work, knowing how to work with fireworks is not required. However, detailed analytics and updating existing search jobs requires using the lpad command line interface, or the LaunchPad python interface of fireworks. MongoDB MongoDB is a NSQL database that fireworks uses as a centralised server that each worker pulls jobs from. DISP also uses MongoDB to store relaxed geometry generated by the search. Knowledge of MongoDB is required for advanced usages. The quickest way to launch an MongoDB server on your own computer is to launch it throgh docker . Free public internet server is avaliable from the MongoDB Atlas service. However, the free tier impose many limitations, and you may want to run a virtual private server (VPS) for MongoDB service yourselves. Life cycles of a search task stateDiagram-v2 [*] --> READY READY --> RUNNING RUNNING --> COMPLETED RUNNING --> RELAX_TIMEDOUT RUNNING --> RELAX_ERRORED READY --> INSUFFICIENT_TIME INSUFFICIENT_TIME --> READY RELAX_TIMEDOUT --> READY COMPLETED --> DB_UPLOAD COMPLETED --> [*] RELAX_ERRORED --> [*] DB_UPLOAD --> [*]","title":"Workflow Engine"},{"location":"background/workflow_engine/#inner-workings","text":"","title":"Inner workings"},{"location":"background/workflow_engine/#fireworks","text":"Fireworks is the workflow engine that DISP uses to deploy searches. Its fully documentation can be found in its own website. For simple search and retrieve type of work, knowing how to work with fireworks is not required. However, detailed analytics and updating existing search jobs requires using the lpad command line interface, or the LaunchPad python interface of fireworks.","title":"Fireworks"},{"location":"background/workflow_engine/#mongodb","text":"MongoDB is a NSQL database that fireworks uses as a centralised server that each worker pulls jobs from. DISP also uses MongoDB to store relaxed geometry generated by the search. Knowledge of MongoDB is required for advanced usages. The quickest way to launch an MongoDB server on your own computer is to launch it throgh docker . Free public internet server is avaliable from the MongoDB Atlas service. However, the free tier impose many limitations, and you may want to run a virtual private server (VPS) for MongoDB service yourselves.","title":"MongoDB"},{"location":"background/workflow_engine/#life-cycles-of-a-search-task","text":"stateDiagram-v2 [*] --> READY READY --> RUNNING RUNNING --> COMPLETED RUNNING --> RELAX_TIMEDOUT RUNNING --> RELAX_ERRORED READY --> INSUFFICIENT_TIME INSUFFICIENT_TIME --> READY RELAX_TIMEDOUT --> READY COMPLETED --> DB_UPLOAD COMPLETED --> [*] RELAX_ERRORED --> [*] DB_UPLOAD --> [*]","title":"Life cycles of a search task"},{"location":"examples/1.04/","text":"Lennard-Jones 38 cluster In this example we search for a LJ 38 cluster and compare the effect of symmetry and minimum species-wise separation. The baseline seed is shown below. Where atoms are placed in a sphere of 3.75 A with a minimum separation of 1.5 A. Al.cell %BLOCK LATTICE_CART 20 0 0 0 20 0 0 0 20 #FIX %ENDBLOCK LATTICE_CART %BLOCK POSITIONS_FRAC Al 0.0 0.0 0.0 # Al1 % NUM=38 %ENDBLOCK POSITIONS_FRAC FIX_ALL_CELL : true #MINSEP=1.5 #CLUSTER #POSAMP=3.75 #SYMMOPS=2-5 #NFORM=1 Al.pp 1 12 6 2.5 Al # Epsilon 1 # Sigma 2 # Beta 1 Two more seeds are included, with one not using any symmetry, and the other also have minimum separation disabled Al_NOSYM.cell %BLOCK LATTICE_CART 20 0 0 0 20 0 0 0 20 #FIX %ENDBLOCK LATTICE_CART %BLOCK POSITIONS_FRAC Al 0.0 0.0 0.0 # Al1 % NUM=38 %ENDBLOCK POSITIONS_FRAC FIX_ALL_CELL : true #MINSEP=1.5 #CLUSTER #POSAMP=3.75 ##SYMMOPS=2-5 #NFORM=1 Al_NOSYM_NOMINSEP.cell %BLOCK LATTICE_CART 20 0 0 0 20 0 0 0 20 #FIX %ENDBLOCK LATTICE_CART %BLOCK POSITIONS_FRAC Al 0.0 0.0 0.0 # Al1 % NUM=38 %ENDBLOCK POSITIONS_FRAC FIX_ALL_CELL : true ##MINSEP=1.5 #CLUSTER #POSAMP=3.75 ##SYMMOPS=2-5 #NFORM=1 Deploy three search runs to the server. disp deploy search --seed Al --project example/1.04 --num 200 --code pp3 --cluster disp deploy search --seed Al_NOSYM --project example/1.04 --num 200 --code pp3 --cluster disp deploy search --seed Al_NOSYM_NOMINSEP --project example/1.04 --num 200 --code pp3 --cluster Now run the search with: export DISP_DB_FILE=`pwd`/disp_db.yaml rlaunch multi 4 --local_redirect There will be many launch* sub directories got created, which can be deleted. Note If you don't have a FW_CONFIG_FILE environmental varible set, search result will also be copied to $USER/disp-base/airss-datastore/example/1.04 . $ disp db summary --project example/1.04 Structure WF count - search RES Init COMPLETED ALL project seed example/1.04 Al 200 200 200 200 Al_NOSYM 200 200 200 200 Al_NOSYM_NOMINSEP 200 200 200 200 To retrieve the SHELX files: disp db retrieve-project --project example/1.04 Standard AIRSS toolkits can be used to rank the structures: $ ca -u 0.01 -s -cl -r -t Al-22022*08-4d246b -173.912 38 Al Oh 2 582 ~ Number of structures : 582 Number of compositions : 1 Al-22022*08-4d246b 0.00 210.526 -4.577 38 Al Oh 2 Al-22022*05-910e48 0.00 210.526 0.018 38 Al C5 1 Al-22022*03-db3120 0.00 210.526 0.026 38 Al C5 1 Al_NOSYM*36-414ffd 0.00 210.526 0.047 38 Al C1 1 Al-22022*57-e24a2b 0.00 210.526 0.051 38 Al Cs 1 Al-22022*56-66b471 0.00 210.526 0.066 38 Al Cs 1 Al_NOSYM*14-999f3c 0.00 210.526 0.077 38 Al C1 1 Al-22022*54-625f07 0.00 210.526 0.078 38 Al D4h 1 Al_NOSYM*36-30e049 0.00 210.526 0.085 38 Al C1 1 Al-22022*53-a81769 0.00 210.526 0.091 38 Al C2 1 Using DISP python interface for analysis SHELX entries stored in DISP can be pulled and analysed. The python code below generates histograms of the energy distribution from these three different seeds. from disp.database.api import SearchDB from disp.analysis.airssutils import ResFile , collect_results_in_df sdb = SearchDB . from_db_file ( \"disp_db.yaml\" ) df = collect_results_in_df ( project_name = 'example/1.04' ) yrange = ( df . enthalpy . min (), df . enthalpy . min () + 40 ) for key , sub in df . groupby ( 'seed_name' ): sub . enthalpy . hist ( range = yrange , bins = 30 , alpha = 0.3 , label = key ) plt . legend () plt . xlabel ( 'Energy' ) plt . ylabel ( 'Count' ) plt . savefig ( 'disp-lj38.png' , dpi = 150 ) Output plot: It can be seen that the symmetry and minimum separations constraints have great impact on the distribution of the relaxed structure. The ground state structure with \\(O_h\\) point group symmetry can be found easily with 200 trials, but it can be a lot most difficult to obtain by a naive random placement of atoms inside a sphere.","title":"Lennard-Jones 38 Cluster"},{"location":"examples/1.04/#lennard-jones-38-cluster","text":"In this example we search for a LJ 38 cluster and compare the effect of symmetry and minimum species-wise separation. The baseline seed is shown below. Where atoms are placed in a sphere of 3.75 A with a minimum separation of 1.5 A. Al.cell %BLOCK LATTICE_CART 20 0 0 0 20 0 0 0 20 #FIX %ENDBLOCK LATTICE_CART %BLOCK POSITIONS_FRAC Al 0.0 0.0 0.0 # Al1 % NUM=38 %ENDBLOCK POSITIONS_FRAC FIX_ALL_CELL : true #MINSEP=1.5 #CLUSTER #POSAMP=3.75 #SYMMOPS=2-5 #NFORM=1 Al.pp 1 12 6 2.5 Al # Epsilon 1 # Sigma 2 # Beta 1 Two more seeds are included, with one not using any symmetry, and the other also have minimum separation disabled Al_NOSYM.cell %BLOCK LATTICE_CART 20 0 0 0 20 0 0 0 20 #FIX %ENDBLOCK LATTICE_CART %BLOCK POSITIONS_FRAC Al 0.0 0.0 0.0 # Al1 % NUM=38 %ENDBLOCK POSITIONS_FRAC FIX_ALL_CELL : true #MINSEP=1.5 #CLUSTER #POSAMP=3.75 ##SYMMOPS=2-5 #NFORM=1 Al_NOSYM_NOMINSEP.cell %BLOCK LATTICE_CART 20 0 0 0 20 0 0 0 20 #FIX %ENDBLOCK LATTICE_CART %BLOCK POSITIONS_FRAC Al 0.0 0.0 0.0 # Al1 % NUM=38 %ENDBLOCK POSITIONS_FRAC FIX_ALL_CELL : true ##MINSEP=1.5 #CLUSTER #POSAMP=3.75 ##SYMMOPS=2-5 #NFORM=1 Deploy three search runs to the server. disp deploy search --seed Al --project example/1.04 --num 200 --code pp3 --cluster disp deploy search --seed Al_NOSYM --project example/1.04 --num 200 --code pp3 --cluster disp deploy search --seed Al_NOSYM_NOMINSEP --project example/1.04 --num 200 --code pp3 --cluster Now run the search with: export DISP_DB_FILE=`pwd`/disp_db.yaml rlaunch multi 4 --local_redirect There will be many launch* sub directories got created, which can be deleted. Note If you don't have a FW_CONFIG_FILE environmental varible set, search result will also be copied to $USER/disp-base/airss-datastore/example/1.04 . $ disp db summary --project example/1.04 Structure WF count - search RES Init COMPLETED ALL project seed example/1.04 Al 200 200 200 200 Al_NOSYM 200 200 200 200 Al_NOSYM_NOMINSEP 200 200 200 200 To retrieve the SHELX files: disp db retrieve-project --project example/1.04 Standard AIRSS toolkits can be used to rank the structures: $ ca -u 0.01 -s -cl -r -t Al-22022*08-4d246b -173.912 38 Al Oh 2 582 ~ Number of structures : 582 Number of compositions : 1 Al-22022*08-4d246b 0.00 210.526 -4.577 38 Al Oh 2 Al-22022*05-910e48 0.00 210.526 0.018 38 Al C5 1 Al-22022*03-db3120 0.00 210.526 0.026 38 Al C5 1 Al_NOSYM*36-414ffd 0.00 210.526 0.047 38 Al C1 1 Al-22022*57-e24a2b 0.00 210.526 0.051 38 Al Cs 1 Al-22022*56-66b471 0.00 210.526 0.066 38 Al Cs 1 Al_NOSYM*14-999f3c 0.00 210.526 0.077 38 Al C1 1 Al-22022*54-625f07 0.00 210.526 0.078 38 Al D4h 1 Al_NOSYM*36-30e049 0.00 210.526 0.085 38 Al C1 1 Al-22022*53-a81769 0.00 210.526 0.091 38 Al C2 1","title":"Lennard-Jones 38 cluster"},{"location":"examples/1.04/#using-disp-python-interface-for-analysis","text":"SHELX entries stored in DISP can be pulled and analysed. The python code below generates histograms of the energy distribution from these three different seeds. from disp.database.api import SearchDB from disp.analysis.airssutils import ResFile , collect_results_in_df sdb = SearchDB . from_db_file ( \"disp_db.yaml\" ) df = collect_results_in_df ( project_name = 'example/1.04' ) yrange = ( df . enthalpy . min (), df . enthalpy . min () + 40 ) for key , sub in df . groupby ( 'seed_name' ): sub . enthalpy . hist ( range = yrange , bins = 30 , alpha = 0.3 , label = key ) plt . legend () plt . xlabel ( 'Energy' ) plt . ylabel ( 'Count' ) plt . savefig ( 'disp-lj38.png' , dpi = 150 ) Output plot: It can be seen that the symmetry and minimum separations constraints have great impact on the distribution of the relaxed structure. The ground state structure with \\(O_h\\) point group symmetry can be found easily with 200 trials, but it can be a lot most difficult to obtain by a naive random placement of atoms inside a sphere.","title":"Using DISP python interface for analysis"},{"location":"examples/1.1/","text":"Ground state of a Lennard-Jones solid Tip This example can be run on a laptop, no DFT calculation is involved In this example we will search for the ground state of a Lennard-Jones solid following the example 1.1 in the AIRSS pacakge itself (see https://airss-docs.github.io/tutorials/examples/). The cell is chosen randomly with a volume of 8 Ang^3 per atom, and 8 atoms are placed into the cell. A minimum separation of 1.5 A is enforced when generating the structure. Al.cell %BLOCK LATTICE_CART 2 0 0 0 2 0 0 0 2 %ENDBLOCK LATTICE_CART %BLOCK POSITIONS_FRAC Al 0.0 0.0 0.0 # Al1 % NUM=8 %ENDBLOCK POSITIONS_FRAC #MINSEP=1.5 Note that there is a only a single entry in the POSITIONS_FRAC block with NUM=8 . This syntex allows the volume of the cell to be scaled automatically - the apparent volume is for the apparent number of atoms in the POSITIONS_FRAC block. To search a 16-atom cell, simply change NUM=8 to NUM=16 . The pair potential infromation is stored in the Al.pp file. Al.pp 1 12 6 2.5 Al # Epsilon 1 # Sigma 2 # Beta 1 The 12 and 6 in the first line are the exponentials, making this a Lennard-Jones potentials, followed by the cut off distance in the unit of sigma . The potential is shifted so that the energy is zero at the cut off radius (see here ). You should be able to launch a search with: airss.pl -pp3 -max 20 -seed Al This command will generate 20 structures and relax them, the final results will be in the SHLEX format. You can list the structures using the ca -r command (equivalent to cat *.res | cryan -r ). Al-12719-7842-18 0.00 7.561 -6.659 8 Al P63/mmc 1 Al-12719-7842-2 0.00 7.561 0.000 8 Al P63/mmc 1 Al-12719-7842-5 0.00 7.561 0.000 8 Al P63/mmc 1 Al-12719-7842-14 -0.00 7.562 0.002 8 Al P63/mmc 1 Al-12719-7842-20 0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-15 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-4 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-8 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-16 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-7 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-12 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-11 0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-17 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-9 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-19 -0.00 7.784 0.260 8 Al C2/m 1 Al-12719-7842-3 -0.00 7.825 0.360 8 Al Immm 1 Al-12719-7842-13 0.00 7.835 0.364 8 Al Cmmm 1 Al-12719-7842-10 -0.00 8.119 0.700 8 Al R-3c 1 Al-12719-7842-1 -0.00 8.446 0.705 8 Al Cm 1 Al-12719-7842-6 0.00 8.773 0.869 8 Al C2/m 1 Column one shows the label of each structure. The second and the third column shows the pressure and the volume of the structures, respectively. The forth column is the enthalpy of the system, based on which the structure are ranked. For clarity, from the second row and below only the difference is printed. The value is normalised per formula as shown in the sixth column. The number of formula is shown in the fifth column. The space group of each structure is shown in the seventh column, in the output above the known hexagonal ground state structure (P63/mmc) phase is found. So far we are just using the scripts in the AIRSS package itself. Using DISP Let's now use DISP as the search runner. You should have a MongDB instance running some where, and have updated its information in both disp_db.yaml and my_launchpad.yaml . The default in these two files is to connect to a instance hosted locally. Using MongoDB locally If you are on Linux, you can use docker to quickly launch an mongodb: sudo service docker start sudo docker run -d -p 27017:27017 mongo:4.4.9 to shutdown the service: sudo docker ps to find the id the of container, then sudo docker stop <container_id> will stop the container. Note Test the fireworks setup with lpad get_fws - it should return [] for a fresh database. For a completely blank database, you need to run lpad reset to initialise it for fireworks. First, check the status with disp check database . This should print something like: Using launchpad file at `<your current directory>/my_launchpad.yaml` LaunchPad name: bonan-db DISP database specification file located at: <your current directory>/disp_db.yaml host : XXXXXX user : XXXXXX port : XXXXXX db_name : XXXXXX Total number of SHELX entries: XXXX The last line indicates that the database is successfully connected. Note Test the fireworks setup with lpad get_fws - it should return [] for a fresh database. For a completely blank database, you need to run lpad reset to initialise it for fireworks. Now, you can deploy the searches with disp deploy search --seed Al --project example/1.1 --code pp3 --num 20 Note A --dryrun tag can be used to dryrun the submission of the jobs. It also runs buildcell locally trying to build the structures and will print the inputs. It is a good practice to check if they are correct before submitting the workload to the remote computer. Now, the jobs have been submitted to the remote server. To run the actual search, using the local computer as a worker: export DISP_DB_FILE=$(pwd)/disp_db.yaml rlaunch rapidfire The first line is important as it sets the environmental variable so the worker knows which database to upload the completed structures to. In production search using DFT calculations, we need to run rlaunch from inside a job script. However, because Fireworks does it deal with walltime limits, an extended launcher trlaunch should be used instead. This way the remaining walltime limit will be taken into consideration. Now you can inspect the results with: disp db summary which should give an output like the one below: Structure WF count - search RES Init COMPLETED ALL project seed test-1-1 Al 20 20 20 20 The resulting structure can be pulled from the server with: disp db retrieve-project --project test-1-1 Then use ca -r to check the results, just as before. Further reading The online airss documentation contains more insightful tutorials for searching Lennard-Jone systems. Note Search for isolated clusters is not currently supported by DISP.","title":"Lennard-Jones Solid"},{"location":"examples/1.1/#ground-state-of-a-lennard-jones-solid","text":"Tip This example can be run on a laptop, no DFT calculation is involved In this example we will search for the ground state of a Lennard-Jones solid following the example 1.1 in the AIRSS pacakge itself (see https://airss-docs.github.io/tutorials/examples/). The cell is chosen randomly with a volume of 8 Ang^3 per atom, and 8 atoms are placed into the cell. A minimum separation of 1.5 A is enforced when generating the structure. Al.cell %BLOCK LATTICE_CART 2 0 0 0 2 0 0 0 2 %ENDBLOCK LATTICE_CART %BLOCK POSITIONS_FRAC Al 0.0 0.0 0.0 # Al1 % NUM=8 %ENDBLOCK POSITIONS_FRAC #MINSEP=1.5 Note that there is a only a single entry in the POSITIONS_FRAC block with NUM=8 . This syntex allows the volume of the cell to be scaled automatically - the apparent volume is for the apparent number of atoms in the POSITIONS_FRAC block. To search a 16-atom cell, simply change NUM=8 to NUM=16 . The pair potential infromation is stored in the Al.pp file. Al.pp 1 12 6 2.5 Al # Epsilon 1 # Sigma 2 # Beta 1 The 12 and 6 in the first line are the exponentials, making this a Lennard-Jones potentials, followed by the cut off distance in the unit of sigma . The potential is shifted so that the energy is zero at the cut off radius (see here ). You should be able to launch a search with: airss.pl -pp3 -max 20 -seed Al This command will generate 20 structures and relax them, the final results will be in the SHLEX format. You can list the structures using the ca -r command (equivalent to cat *.res | cryan -r ). Al-12719-7842-18 0.00 7.561 -6.659 8 Al P63/mmc 1 Al-12719-7842-2 0.00 7.561 0.000 8 Al P63/mmc 1 Al-12719-7842-5 0.00 7.561 0.000 8 Al P63/mmc 1 Al-12719-7842-14 -0.00 7.562 0.002 8 Al P63/mmc 1 Al-12719-7842-20 0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-15 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-4 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-8 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-16 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-7 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-12 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-11 0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-17 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-9 -0.00 7.564 0.005 8 Al Fm-3m 1 Al-12719-7842-19 -0.00 7.784 0.260 8 Al C2/m 1 Al-12719-7842-3 -0.00 7.825 0.360 8 Al Immm 1 Al-12719-7842-13 0.00 7.835 0.364 8 Al Cmmm 1 Al-12719-7842-10 -0.00 8.119 0.700 8 Al R-3c 1 Al-12719-7842-1 -0.00 8.446 0.705 8 Al Cm 1 Al-12719-7842-6 0.00 8.773 0.869 8 Al C2/m 1 Column one shows the label of each structure. The second and the third column shows the pressure and the volume of the structures, respectively. The forth column is the enthalpy of the system, based on which the structure are ranked. For clarity, from the second row and below only the difference is printed. The value is normalised per formula as shown in the sixth column. The number of formula is shown in the fifth column. The space group of each structure is shown in the seventh column, in the output above the known hexagonal ground state structure (P63/mmc) phase is found. So far we are just using the scripts in the AIRSS package itself.","title":"Ground state of a Lennard-Jones solid"},{"location":"examples/1.1/#using-disp","text":"Let's now use DISP as the search runner. You should have a MongDB instance running some where, and have updated its information in both disp_db.yaml and my_launchpad.yaml . The default in these two files is to connect to a instance hosted locally. Using MongoDB locally If you are on Linux, you can use docker to quickly launch an mongodb: sudo service docker start sudo docker run -d -p 27017:27017 mongo:4.4.9 to shutdown the service: sudo docker ps to find the id the of container, then sudo docker stop <container_id> will stop the container. Note Test the fireworks setup with lpad get_fws - it should return [] for a fresh database. For a completely blank database, you need to run lpad reset to initialise it for fireworks. First, check the status with disp check database . This should print something like: Using launchpad file at `<your current directory>/my_launchpad.yaml` LaunchPad name: bonan-db DISP database specification file located at: <your current directory>/disp_db.yaml host : XXXXXX user : XXXXXX port : XXXXXX db_name : XXXXXX Total number of SHELX entries: XXXX The last line indicates that the database is successfully connected. Note Test the fireworks setup with lpad get_fws - it should return [] for a fresh database. For a completely blank database, you need to run lpad reset to initialise it for fireworks. Now, you can deploy the searches with disp deploy search --seed Al --project example/1.1 --code pp3 --num 20 Note A --dryrun tag can be used to dryrun the submission of the jobs. It also runs buildcell locally trying to build the structures and will print the inputs. It is a good practice to check if they are correct before submitting the workload to the remote computer. Now, the jobs have been submitted to the remote server. To run the actual search, using the local computer as a worker: export DISP_DB_FILE=$(pwd)/disp_db.yaml rlaunch rapidfire The first line is important as it sets the environmental variable so the worker knows which database to upload the completed structures to. In production search using DFT calculations, we need to run rlaunch from inside a job script. However, because Fireworks does it deal with walltime limits, an extended launcher trlaunch should be used instead. This way the remaining walltime limit will be taken into consideration. Now you can inspect the results with: disp db summary which should give an output like the one below: Structure WF count - search RES Init COMPLETED ALL project seed test-1-1 Al 20 20 20 20 The resulting structure can be pulled from the server with: disp db retrieve-project --project test-1-1 Then use ca -r to check the results, just as before.","title":"Using DISP"},{"location":"examples/1.1/#further-reading","text":"The online airss documentation contains more insightful tutorials for searching Lennard-Jone systems. Note Search for isolated clusters is not currently supported by DISP.","title":"Further reading"},{"location":"examples/sto/","text":"Searching for SrTiO3 ground state structure \\(\\mathrm{SrTiO_3}\\) has a cubic perovskite structure at room temperature with space group \\(Pm\\bar{3}m\\) . Search with GULP In this example we search for its ground state using buckingham potential with long range coulomb interaction with GULP . The Buckingham potential has the form: \\[ \\Phi_{12} = A \\exp(-Br) - \\frac{C}{r^6} + \\frac{q_1 q_2}{4\\pi\\epsilon_0r} \\] A template seed can be generated with: gencell 60 1 Sr 1 Ti 1 O 3 The gencell command is a very useful for providing a template seed file for buildcell . Using the command above, the generated cell has a target volume of 60 \\(\\unicode{x212B}^3\\) containing one Sr atom, one Ti atom and three O atoms. The content of this file is shown below. SrTiO3.cell %BLOCK LATTICE_CART 3.914865 0 0 0 3.914865 0 0 0 3.914865 %ENDBLOCK LATTICE_CART #VARVOL=60 %BLOCK POSITIONS_FRAC Sr 0.0 0.0 0.0 # Sr1 % NUM=1 Ti 0.0 0.0 0.0 # Ti1 % NUM=1 O 0.0 0.0 0.0 # O1 % NUM=1 O 0.0 0.0 0.0 # O2 % NUM=1 O 0.0 0.0 0.0 # O3 % NUM=1 %ENDBLOCK POSITIONS_FRAC ##SPECIES=Sr,Ti,O ##NATOM=3-9 ##FOCUS=3 #SYMMOPS=2-4 ##SGRANK=20 #NFORM=2-6 ##ADJGEN=0-1 #SLACK=0.25 #OVERLAP=0.1 #MINSEP=1.8-3 #COMPACT #CELLADAPT ##SYSTEM={Rhom,Tric,Mono,Cubi,Hexa,Orth,Tetra} KPOINTS_MP_SPACING 0.07 SYMMETRY_GENERATE SNAP_TO_SYMMETRY %BLOCK SPECIES_POT QC5 %ENDBLOCK SPECIES_POT %BLOCK EXTERNAL_PRESSURE 0 0 0 0 0 0 %ENDBLOCK EXTERNAL_PRESSURE An param is also generated for default CASTEP inputs. SrTiO3.param A param file CASTEP calculation is generated as well. task : geometryoptimization xc_functional : PBE spin_polarized : false fix_occupancy : false metals_method : dm mixing_scheme : pulay max_scf_cycles : 1000 cut_off_energy : 340 eV opt_strategy : speed page_wvfns : 0 num_dump_cycles : 0 backup_interval : 0 geom_method : LBFGS geom_max_iter : 20 mix_history_length : 20 finite_basis_corr : 0 fixed_npw : true write_cell_structure : true write_checkpoint : none write_bib : false write_otfg : false write_cst_esp : false write_bands : false write_geom : false bs_write_eigenvalues : false calculate_stress : true The potential in put for GULP is: SrTiO3.lib for GULP This file SrTiO3.lib is needed for providing the parameters of the interatomic potentials. species Sr 2.00 Ti 4.00 O -2.00 lennard 12 6 Sr Sr 1.0 0.0 0. 6.0 Sr Ti 1.0 0.0 0. 6.0 Sr O 2.0 0.0 0. 6.0 Ti Ti 1.0 0.0 0. 6.0 Ti O 2.0 0.0 0. 6.0 O O 2.0 0.0 0. 6.0 buck Sr Sr 9949.1 0.2446 0.0 0. 8.0 Sr Ti 12708.1 0.2191 0.0 0. 8.0 Sr O 1805.2 0.3250 0.0 0. 8.0 Ti Ti 16963.1 0.1847 0.0 0. 8.0 Ti O 845.0 0.3770 0.0 0. 8.0 O O 22746.3 0.1490 0.0 0. 8.0 While this SrTiO3.cell can be used straight away for searching already, prior knowledge can be used to accelerate the search. The number of formulas can be altered by setting NFORM=2-6 to search for 2-6 formula units, since it is expected thtat the ground state structure would take more than one formula units. In addition, the specie-wise minimum separations can be set using the knowledge of known ion sizes and bond lengths - the Ti-O bond is known to be at least 1.8 \\(\\unicode{x212B}\\) long: ##MINSEP=1.8-3.0 This sets the species-wise minimum separation to be chosen randomly between 1.8 \\(\\unicode{x212B}\\) to 3.0 \\(\\unicode{x212B}\\) . Tip One can invoke more knowledge of the system - cation-cation or anion-anion distances are larger than cation-anion distances. Incorporating this in the structure generation process would further improve the efficiency. We can now deploy our search with: disp deploy search --project example/sto/gulp --seed SrTiO3 --code gulp --num 200 To run locally export DISP_DB_FILE=$(pwd)/disp_db.yaml rlaunch rapidfire disp db retrieve-project --project example/sto/gulp Example output: cat *.res | cryan -u 0.1 -r -t SrTiO3-2*57-e185f4 0.00 61.004 -149.364 3 TiSrO3 Pm-3m 6 SrTiO3-2*37-9915e8 0.00 103.123 0.369 4 TiSrO3 Cmme 1 SrTiO3-2*02-d20277 0.00 85.448 0.399 2 TiSrO3 P21/m 4 SrTiO3-2*57-544bb1 0.00 102.862 0.422 4 TiSrO3 C2/c 1 SrTiO3-2*39-1dddc1 0.00 106.323 0.609 4 TiSrO3 P1 1 SrTiO3-2*05-354449 0.00 84.269 0.621 3 TiSrO3 P2 1 SrTiO3-2*25-1b6445 0.00 68.232 0.710 2 TiSrO3 R-3 3 SrTiO3-2*33-2f8d70 0.00 116.637 0.716 3 TiSrO3 P3212 1 SrTiO3-2*28-308697 0.00 100.410 0.718 4 TiSrO3 P1 1 SrTiO3-2*03-47308a 0.00 101.734 0.726 4 TiSrO3 P1 1 The above commend tries to unite similar structures before ranking them. The numbers of united structures are printed in the last column. It can be seen that ground state structure ( \\(Pm\\bar{3}m\\) ) has been encountered six times, giving an encounter rate of 3%. Note As with all global search methods, there is no guarantee that the ground state is found. Given a \\(3\\%\\) encounter rate, the odds of finding the ground state out of 200 trials is: \\[1 - (0.97)^{200} = 99.7 \\% \\] Still, one can not rule our that there exists a true ground state with lower encounter rate. For example, if the encounter rate is 0.1%, the odds of finding it in 200 trials is only \\(18.1\\%\\) . Search with CASTEP Now we use CASTEP to perform the search using the same seed. disp deploy search --seed SrTiO3 --project example/sto/dft --num 200 --priority 200 --category 24-core This deploys the search tasks with a higher priority. The actual calculations should be run on a decent-sized computing cluster. Here the --category tag set ensures that the job to be picked up by workers whose category is set to 24-core . The command disp db summary --project example/sto/dft can be used to monitor the status of the search. Once all 200 structures have been completed, retrieve the SHELX files and rank them with ca -r -t as before: SrTiO3-2*16-fbabe1 0.01 60.788 -3798.971 2 TiSrO3 P4mm 1 SrTiO3-2*13-400370 -0.05 61.009 0.008 2 TiSrO3 R3m 1 SrTiO3-2*39-f3dc32 -0.04 61.073 0.011 3 TiSrO3 R3m 1 SrTiO3-2*49-8bd3e2 -0.03 61.094 0.011 3 TiSrO3 R3m 1 SrTiO3-2*52-9949ce 0.02 83.182 0.092 2 TiSrO3 P21/m 1 SrTiO3-2*30-e8bee6 -0.00 80.260 0.425 4 TiSrO3 Ima2 1 SrTiO3-2*38-7d3a16 0.03 76.714 0.445 4 TiSrO3 C2/c 1 SrTiO3-2*18-ac0857 0.03 72.950 0.466 6 TiSrO3 P32 1 SrTiO3-2*29-c45552 -0.01 74.188 0.498 2 TiSrO3 C2/m 1 SrTiO3-2*07-085d5a -0.00 95.629 0.576 6 TiSrO3 P-6 1 At the first glance, there is a no structure with space group \\(Pm\\bar{3}m\\) . This is not surprise since the \\(Pm\\bar{3}m\\) phase is not actually the low temperature ground state. The true ground state has a distorted octahedral network with space group \\(I4/mcm\\) . While we did not found this exact phase, the top four structures are in fact also perovskites but has different distortion patterns. Note that we have sampled only 200 structures, with the only prior knowledge of estimate range of atom-atom minimum distances and volume per atom . While continuing the search may allow the true ground state to be found, one can already establish at this point that the ground state of \\(\\mathrm{SrTiO_3}\\) is a probably a perovskite. Note Perovskites are known to have many distorted phases with octahedral. The P4mm phase obtained is non-central symmetric and has been reported in the literature as well[^1]. Using the cubic phases as the high symmetry starting structure, one can also determine the ground state by mode mapping[^2]. High precision calculation Since the DFT search is carried out with setting prioritising speed rather than accuracy, typically one would need to re-relax the obtained structure with more converged parameters and more transferable pseudopotentials. First, create the SrTiO3-refine.cell and SrTiO3-refine.param with revised parameters: SrTiO3-refine.cell %BLOCK LATTICE_CART 3.914865 0 0 0 3.914865 0 0 0 3.914865 %ENDBLOCK LATTICE_CART #VARVOL=60 %BLOCK POSITIONS_FRAC Sr 0.0 0.0 0.0 # Sr1 % NUM=1 Ti 0.0 0.0 0.0 # Ti1 % NUM=1 O 0.0 0.0 0.0 # O1 % NUM=1 O 0.0 0.0 0.0 # O2 % NUM=1 O 0.0 0.0 0.0 # O3 % NUM=1 %ENDBLOCK POSITIONS_FRAC KPOINTS_MP_SPACING 0.05 SYMMETRY_GENERATE SNAP_TO_SYMMETRY %BLOCK SPECIES_POT C19 %ENDBLOCK SPECIES_POT %BLOCK EXTERNAL_PRESSURE 0 0 0 0 0 0 %ENDBLOCK EXTERNAL_PRESSURE Where the SPECIES_POT is changed from QC5 to C19 . The latter is a library with more accurate pseudopotentials ( delta = 0.4 meV ). In addition, the spaces of generated kpoints is requested to be at most \\(0.05 2\\pi \\unicode{x212B}^{-1}\\) for improved sampling of the reciprocal space. SrTiO3-refine.param task : geometryoptimization xc_functional : PBE spin_polarized : false fix_occupancy : false metals_method : dm mixing_scheme : pulay max_scf_cycles : 1000 cut_off_energy : 700 eV opt_strategy : speed page_wvfns : 0 num_dump_cycles : 0 backup_interval : 0 geom_method : LBFGS geom_max_iter : 100 mix_history_length : 20 finite_basis_corr : auto fixed_npw : false write_cell_structure : true write_checkpoint : none write_bib : false write_otfg : false write_cst_esp : false write_bands : false write_geom : false bs_write_eigenvalues : false calculate_stress : true In the param file, the plane-wave cut off energy is raised to 700 eV . Constant basis quality relaxation In this example, the fixed_npw is turned off so the variable cell relaxation will be performed under constant cut-off energy (quality) mode, and finite_basis_corr is turned on to allow the Pulay stress to be correct automatically. Otherwise, the basis set would change with unit cell, hence the effective cut off energy can be different from that initially supplied. This means that the final energy is always consistent with the geometry, and there is no need to perform an additional singlepoint calculation as in constant-basis mode, e.g. fixed_npw : true . Create a folder with the top structures: mkdir refine cp $(ca -r -t -l | awk '{print $1\".res\"}') refine/ And deploy the relaxations with: disp deploy relax --seed SrTiO3-refine --base-cell SrTiO3-refine.cell \\ --cell \"refine/SrTiO3-*.res\" --param SrTiO3-refine.param --project example/sto/dft-refine \\ --priority 100 --category 24-core --cycles 0 Note that setting cycles to 0 bypass the automatic restart routine in castep_relax which is not needed with constant basis quality mode. Tip Final results, one may also want to have: grid_scale : 2 fine_grid_scale : 3 in order to use denser FFT grids. The high precision calculations result in a slightly different ranking of energy amount the \\(R3m\\) and the \\(P4mm\\) phases. The three \\(R3m\\) phases are now having the same energy - they are in fact identical structures. $ ca -r SrTiO3-2*39-f3dc32 0.09 61.446 -3798.370 3 TiSrO3 R3m 1 SrTiO3-2*13-400370 -0.02 61.654 0.000 2 TiSrO3 R3m 1 SrTiO3-2*49-8bd3e2 0.05 61.545 0.000 3 TiSrO3 R3m 1 SrTiO3-2*16-fbabe1 0.01 61.490 0.001 2 TiSrO3 P4mm 1 SrTiO3-2*52-9949ce -0.00 84.050 0.068 2 TiSrO3 P21/m 1 SrTiO3-2*30-e8bee6 -0.04 81.673 0.396 4 TiSrO3 Ima2 1 SrTiO3-2*38-7d3a16 -0.03 77.630 0.425 4 TiSrO3 C2/c 1 SrTiO3-2*18-ac0857 0.06 74.560 0.433 6 TiSrO3 P32 1 SrTiO3-2*29-c45552 0.03 75.529 0.471 2 TiSrO3 C2/m 1 SrTiO3-2*07-085d5a 0.05 97.381 0.551 6 TiSrO3 P-6 1 Total resources usages The total time that each structure used is recorded in the SHELX file. In this example, a total of about 7000 core hours have been used. $ tar -axf sto-res-dft.tar.gz -O | grep Total | awk 'BEGIN{x=0}{x+=$4}END{print x /3600 * 24}' 6945.92 A total of about 7000 core hours has been consumed. There are 24 cores per node, so this is equivalent to roughly 12 node days, or having 12 such nodes working for a single day. Savings can be made by running the searches with only 4 cores per worker , and six of such workers can be placed on a node with 24 cores. $ tar -axf sto-res-dft-4c.tar.gz -O | grep Total | awk 'BEGIN{x=0}{x+=$4}END{print x /3600 * 4 / 189 * 200}' 3893.72 In this case, the estimated time for getting 200 relaxed structure is about 4000 core hours - a 43 % save in the computational resources by replacing 24-way MPI (24 cores) with 4-way MPI (cores) for performing relaxation! Even with a 10 % uncertainty due to the limited size and stochastic nature of the search, this is still a significant save to make. Nevertheless, running with more workers each using fewer cores means that each relaxation would take longer time to complete, giving a reduced turn around rate. This may result in increased time-to-solution for small-scale searching more difficult relaxation can take much longer to finish. For a search involving thousands of trials, the optimum strategy is to use low core counts first, and finish off the search with workers with increased cores counts.","title":"SrTiO3 Ground State"},{"location":"examples/sto/#searching-for-srtio3-ground-state-structure","text":"\\(\\mathrm{SrTiO_3}\\) has a cubic perovskite structure at room temperature with space group \\(Pm\\bar{3}m\\) .","title":"Searching for SrTiO3 ground state structure"},{"location":"examples/sto/#search-with-gulp","text":"In this example we search for its ground state using buckingham potential with long range coulomb interaction with GULP . The Buckingham potential has the form: \\[ \\Phi_{12} = A \\exp(-Br) - \\frac{C}{r^6} + \\frac{q_1 q_2}{4\\pi\\epsilon_0r} \\] A template seed can be generated with: gencell 60 1 Sr 1 Ti 1 O 3 The gencell command is a very useful for providing a template seed file for buildcell . Using the command above, the generated cell has a target volume of 60 \\(\\unicode{x212B}^3\\) containing one Sr atom, one Ti atom and three O atoms. The content of this file is shown below. SrTiO3.cell %BLOCK LATTICE_CART 3.914865 0 0 0 3.914865 0 0 0 3.914865 %ENDBLOCK LATTICE_CART #VARVOL=60 %BLOCK POSITIONS_FRAC Sr 0.0 0.0 0.0 # Sr1 % NUM=1 Ti 0.0 0.0 0.0 # Ti1 % NUM=1 O 0.0 0.0 0.0 # O1 % NUM=1 O 0.0 0.0 0.0 # O2 % NUM=1 O 0.0 0.0 0.0 # O3 % NUM=1 %ENDBLOCK POSITIONS_FRAC ##SPECIES=Sr,Ti,O ##NATOM=3-9 ##FOCUS=3 #SYMMOPS=2-4 ##SGRANK=20 #NFORM=2-6 ##ADJGEN=0-1 #SLACK=0.25 #OVERLAP=0.1 #MINSEP=1.8-3 #COMPACT #CELLADAPT ##SYSTEM={Rhom,Tric,Mono,Cubi,Hexa,Orth,Tetra} KPOINTS_MP_SPACING 0.07 SYMMETRY_GENERATE SNAP_TO_SYMMETRY %BLOCK SPECIES_POT QC5 %ENDBLOCK SPECIES_POT %BLOCK EXTERNAL_PRESSURE 0 0 0 0 0 0 %ENDBLOCK EXTERNAL_PRESSURE An param is also generated for default CASTEP inputs. SrTiO3.param A param file CASTEP calculation is generated as well. task : geometryoptimization xc_functional : PBE spin_polarized : false fix_occupancy : false metals_method : dm mixing_scheme : pulay max_scf_cycles : 1000 cut_off_energy : 340 eV opt_strategy : speed page_wvfns : 0 num_dump_cycles : 0 backup_interval : 0 geom_method : LBFGS geom_max_iter : 20 mix_history_length : 20 finite_basis_corr : 0 fixed_npw : true write_cell_structure : true write_checkpoint : none write_bib : false write_otfg : false write_cst_esp : false write_bands : false write_geom : false bs_write_eigenvalues : false calculate_stress : true The potential in put for GULP is: SrTiO3.lib for GULP This file SrTiO3.lib is needed for providing the parameters of the interatomic potentials. species Sr 2.00 Ti 4.00 O -2.00 lennard 12 6 Sr Sr 1.0 0.0 0. 6.0 Sr Ti 1.0 0.0 0. 6.0 Sr O 2.0 0.0 0. 6.0 Ti Ti 1.0 0.0 0. 6.0 Ti O 2.0 0.0 0. 6.0 O O 2.0 0.0 0. 6.0 buck Sr Sr 9949.1 0.2446 0.0 0. 8.0 Sr Ti 12708.1 0.2191 0.0 0. 8.0 Sr O 1805.2 0.3250 0.0 0. 8.0 Ti Ti 16963.1 0.1847 0.0 0. 8.0 Ti O 845.0 0.3770 0.0 0. 8.0 O O 22746.3 0.1490 0.0 0. 8.0 While this SrTiO3.cell can be used straight away for searching already, prior knowledge can be used to accelerate the search. The number of formulas can be altered by setting NFORM=2-6 to search for 2-6 formula units, since it is expected thtat the ground state structure would take more than one formula units. In addition, the specie-wise minimum separations can be set using the knowledge of known ion sizes and bond lengths - the Ti-O bond is known to be at least 1.8 \\(\\unicode{x212B}\\) long: ##MINSEP=1.8-3.0 This sets the species-wise minimum separation to be chosen randomly between 1.8 \\(\\unicode{x212B}\\) to 3.0 \\(\\unicode{x212B}\\) . Tip One can invoke more knowledge of the system - cation-cation or anion-anion distances are larger than cation-anion distances. Incorporating this in the structure generation process would further improve the efficiency. We can now deploy our search with: disp deploy search --project example/sto/gulp --seed SrTiO3 --code gulp --num 200 To run locally export DISP_DB_FILE=$(pwd)/disp_db.yaml rlaunch rapidfire disp db retrieve-project --project example/sto/gulp Example output: cat *.res | cryan -u 0.1 -r -t SrTiO3-2*57-e185f4 0.00 61.004 -149.364 3 TiSrO3 Pm-3m 6 SrTiO3-2*37-9915e8 0.00 103.123 0.369 4 TiSrO3 Cmme 1 SrTiO3-2*02-d20277 0.00 85.448 0.399 2 TiSrO3 P21/m 4 SrTiO3-2*57-544bb1 0.00 102.862 0.422 4 TiSrO3 C2/c 1 SrTiO3-2*39-1dddc1 0.00 106.323 0.609 4 TiSrO3 P1 1 SrTiO3-2*05-354449 0.00 84.269 0.621 3 TiSrO3 P2 1 SrTiO3-2*25-1b6445 0.00 68.232 0.710 2 TiSrO3 R-3 3 SrTiO3-2*33-2f8d70 0.00 116.637 0.716 3 TiSrO3 P3212 1 SrTiO3-2*28-308697 0.00 100.410 0.718 4 TiSrO3 P1 1 SrTiO3-2*03-47308a 0.00 101.734 0.726 4 TiSrO3 P1 1 The above commend tries to unite similar structures before ranking them. The numbers of united structures are printed in the last column. It can be seen that ground state structure ( \\(Pm\\bar{3}m\\) ) has been encountered six times, giving an encounter rate of 3%. Note As with all global search methods, there is no guarantee that the ground state is found. Given a \\(3\\%\\) encounter rate, the odds of finding the ground state out of 200 trials is: \\[1 - (0.97)^{200} = 99.7 \\% \\] Still, one can not rule our that there exists a true ground state with lower encounter rate. For example, if the encounter rate is 0.1%, the odds of finding it in 200 trials is only \\(18.1\\%\\) .","title":"Search with GULP"},{"location":"examples/sto/#search-with-castep","text":"Now we use CASTEP to perform the search using the same seed. disp deploy search --seed SrTiO3 --project example/sto/dft --num 200 --priority 200 --category 24-core This deploys the search tasks with a higher priority. The actual calculations should be run on a decent-sized computing cluster. Here the --category tag set ensures that the job to be picked up by workers whose category is set to 24-core . The command disp db summary --project example/sto/dft can be used to monitor the status of the search. Once all 200 structures have been completed, retrieve the SHELX files and rank them with ca -r -t as before: SrTiO3-2*16-fbabe1 0.01 60.788 -3798.971 2 TiSrO3 P4mm 1 SrTiO3-2*13-400370 -0.05 61.009 0.008 2 TiSrO3 R3m 1 SrTiO3-2*39-f3dc32 -0.04 61.073 0.011 3 TiSrO3 R3m 1 SrTiO3-2*49-8bd3e2 -0.03 61.094 0.011 3 TiSrO3 R3m 1 SrTiO3-2*52-9949ce 0.02 83.182 0.092 2 TiSrO3 P21/m 1 SrTiO3-2*30-e8bee6 -0.00 80.260 0.425 4 TiSrO3 Ima2 1 SrTiO3-2*38-7d3a16 0.03 76.714 0.445 4 TiSrO3 C2/c 1 SrTiO3-2*18-ac0857 0.03 72.950 0.466 6 TiSrO3 P32 1 SrTiO3-2*29-c45552 -0.01 74.188 0.498 2 TiSrO3 C2/m 1 SrTiO3-2*07-085d5a -0.00 95.629 0.576 6 TiSrO3 P-6 1 At the first glance, there is a no structure with space group \\(Pm\\bar{3}m\\) . This is not surprise since the \\(Pm\\bar{3}m\\) phase is not actually the low temperature ground state. The true ground state has a distorted octahedral network with space group \\(I4/mcm\\) . While we did not found this exact phase, the top four structures are in fact also perovskites but has different distortion patterns. Note that we have sampled only 200 structures, with the only prior knowledge of estimate range of atom-atom minimum distances and volume per atom . While continuing the search may allow the true ground state to be found, one can already establish at this point that the ground state of \\(\\mathrm{SrTiO_3}\\) is a probably a perovskite. Note Perovskites are known to have many distorted phases with octahedral. The P4mm phase obtained is non-central symmetric and has been reported in the literature as well[^1]. Using the cubic phases as the high symmetry starting structure, one can also determine the ground state by mode mapping[^2].","title":"Search with CASTEP"},{"location":"examples/sto/#high-precision-calculation","text":"Since the DFT search is carried out with setting prioritising speed rather than accuracy, typically one would need to re-relax the obtained structure with more converged parameters and more transferable pseudopotentials. First, create the SrTiO3-refine.cell and SrTiO3-refine.param with revised parameters: SrTiO3-refine.cell %BLOCK LATTICE_CART 3.914865 0 0 0 3.914865 0 0 0 3.914865 %ENDBLOCK LATTICE_CART #VARVOL=60 %BLOCK POSITIONS_FRAC Sr 0.0 0.0 0.0 # Sr1 % NUM=1 Ti 0.0 0.0 0.0 # Ti1 % NUM=1 O 0.0 0.0 0.0 # O1 % NUM=1 O 0.0 0.0 0.0 # O2 % NUM=1 O 0.0 0.0 0.0 # O3 % NUM=1 %ENDBLOCK POSITIONS_FRAC KPOINTS_MP_SPACING 0.05 SYMMETRY_GENERATE SNAP_TO_SYMMETRY %BLOCK SPECIES_POT C19 %ENDBLOCK SPECIES_POT %BLOCK EXTERNAL_PRESSURE 0 0 0 0 0 0 %ENDBLOCK EXTERNAL_PRESSURE Where the SPECIES_POT is changed from QC5 to C19 . The latter is a library with more accurate pseudopotentials ( delta = 0.4 meV ). In addition, the spaces of generated kpoints is requested to be at most \\(0.05 2\\pi \\unicode{x212B}^{-1}\\) for improved sampling of the reciprocal space. SrTiO3-refine.param task : geometryoptimization xc_functional : PBE spin_polarized : false fix_occupancy : false metals_method : dm mixing_scheme : pulay max_scf_cycles : 1000 cut_off_energy : 700 eV opt_strategy : speed page_wvfns : 0 num_dump_cycles : 0 backup_interval : 0 geom_method : LBFGS geom_max_iter : 100 mix_history_length : 20 finite_basis_corr : auto fixed_npw : false write_cell_structure : true write_checkpoint : none write_bib : false write_otfg : false write_cst_esp : false write_bands : false write_geom : false bs_write_eigenvalues : false calculate_stress : true In the param file, the plane-wave cut off energy is raised to 700 eV . Constant basis quality relaxation In this example, the fixed_npw is turned off so the variable cell relaxation will be performed under constant cut-off energy (quality) mode, and finite_basis_corr is turned on to allow the Pulay stress to be correct automatically. Otherwise, the basis set would change with unit cell, hence the effective cut off energy can be different from that initially supplied. This means that the final energy is always consistent with the geometry, and there is no need to perform an additional singlepoint calculation as in constant-basis mode, e.g. fixed_npw : true . Create a folder with the top structures: mkdir refine cp $(ca -r -t -l | awk '{print $1\".res\"}') refine/ And deploy the relaxations with: disp deploy relax --seed SrTiO3-refine --base-cell SrTiO3-refine.cell \\ --cell \"refine/SrTiO3-*.res\" --param SrTiO3-refine.param --project example/sto/dft-refine \\ --priority 100 --category 24-core --cycles 0 Note that setting cycles to 0 bypass the automatic restart routine in castep_relax which is not needed with constant basis quality mode. Tip Final results, one may also want to have: grid_scale : 2 fine_grid_scale : 3 in order to use denser FFT grids. The high precision calculations result in a slightly different ranking of energy amount the \\(R3m\\) and the \\(P4mm\\) phases. The three \\(R3m\\) phases are now having the same energy - they are in fact identical structures. $ ca -r SrTiO3-2*39-f3dc32 0.09 61.446 -3798.370 3 TiSrO3 R3m 1 SrTiO3-2*13-400370 -0.02 61.654 0.000 2 TiSrO3 R3m 1 SrTiO3-2*49-8bd3e2 0.05 61.545 0.000 3 TiSrO3 R3m 1 SrTiO3-2*16-fbabe1 0.01 61.490 0.001 2 TiSrO3 P4mm 1 SrTiO3-2*52-9949ce -0.00 84.050 0.068 2 TiSrO3 P21/m 1 SrTiO3-2*30-e8bee6 -0.04 81.673 0.396 4 TiSrO3 Ima2 1 SrTiO3-2*38-7d3a16 -0.03 77.630 0.425 4 TiSrO3 C2/c 1 SrTiO3-2*18-ac0857 0.06 74.560 0.433 6 TiSrO3 P32 1 SrTiO3-2*29-c45552 0.03 75.529 0.471 2 TiSrO3 C2/m 1 SrTiO3-2*07-085d5a 0.05 97.381 0.551 6 TiSrO3 P-6 1","title":"High precision calculation"},{"location":"examples/sto/#total-resources-usages","text":"The total time that each structure used is recorded in the SHELX file. In this example, a total of about 7000 core hours have been used. $ tar -axf sto-res-dft.tar.gz -O | grep Total | awk 'BEGIN{x=0}{x+=$4}END{print x /3600 * 24}' 6945.92 A total of about 7000 core hours has been consumed. There are 24 cores per node, so this is equivalent to roughly 12 node days, or having 12 such nodes working for a single day. Savings can be made by running the searches with only 4 cores per worker , and six of such workers can be placed on a node with 24 cores. $ tar -axf sto-res-dft-4c.tar.gz -O | grep Total | awk 'BEGIN{x=0}{x+=$4}END{print x /3600 * 4 / 189 * 200}' 3893.72 In this case, the estimated time for getting 200 relaxed structure is about 4000 core hours - a 43 % save in the computational resources by replacing 24-way MPI (24 cores) with 4-way MPI (cores) for performing relaxation! Even with a 10 % uncertainty due to the limited size and stochastic nature of the search, this is still a significant save to make. Nevertheless, running with more workers each using fewer cores means that each relaxation would take longer time to complete, giving a reduced turn around rate. This may result in increased time-to-solution for small-scale searching more difficult relaxation can take much longer to finish. For a search involving thousands of trials, the optimum strategy is to use low core counts first, and finish off the search with workers with increased cores counts.","title":"Total resources usages"}]}